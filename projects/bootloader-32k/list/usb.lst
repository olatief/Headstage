C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN .\build\usb.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE usb.c OMF2 ROM(COMPACT) OPTIMIZE(9,SPEED) BROWSE INCDIR(..\..\compiler\c51)
                    - DEBUG PRINT(.\list\usb.lst) OBJECT(.\build\usb.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5718 $
  12           */
  13          
  14          /** @file
  15           * Minimalistic USB code for the bootloader.
  16           *
  17           */
  18          #include <Nordic\reg24lu1.h>
  19          #include <intrins.h>
  20          #include <stdbool.h>
  21          
  22          #include "config.h"
  23          #include "usb.h"
  24          
  25          // Place all code and constants in this file in the segment "BOOTLOADER":
  26          #pragma userclass (code = BOOTLOADER)
  27          #pragma userclass (const = BOOTLOADER)
  28          
  29          /** Leaves the minimum of the two arguments */
  30          #define MIN(a, b) ((a) < (b) ? (a) : (b))
  31          
  32          // USB map:
  33          xdata volatile uint8_t out1buf[USB_EP1_SIZE]        _at_ 0xC640;
  34          xdata volatile uint8_t in1buf[USB_EP1_SIZE]         _at_ 0xC680;
  35          xdata volatile uint8_t out0buf[MAX_PACKET_SIZE_EP0] _at_ 0xC6C0;
  36          xdata volatile uint8_t in0buf[MAX_PACKET_SIZE_EP0]  _at_ 0xC700;
  37          xdata volatile uint8_t bout1addr                    _at_ 0xC781;
  38          xdata volatile uint8_t bout2addr                    _at_ 0xC782;
  39          xdata volatile uint8_t bout3addr                    _at_ 0xC783;
  40          xdata volatile uint8_t bout4addr                    _at_ 0xC784;
  41          xdata volatile uint8_t bout5addr                    _at_ 0xC785;
  42          xdata volatile uint8_t binstaddr                    _at_ 0xC788;
  43          xdata volatile uint8_t bin1addr                     _at_ 0xC789;
  44          xdata volatile uint8_t bin2addr                     _at_ 0xC78A;
  45          xdata volatile uint8_t bin3addr                     _at_ 0xC78B;
  46          xdata volatile uint8_t bin4addr                     _at_ 0xC78C;
  47          xdata volatile uint8_t bin5addr                     _at_ 0xC78D;
  48          xdata volatile uint8_t ivec                         _at_ 0xC7A8;
  49          xdata volatile uint8_t in_irq                       _at_ 0xC7A9;
  50          xdata volatile uint8_t out_irq                      _at_ 0xC7AA;
  51          xdata volatile uint8_t usbirq                       _at_ 0xC7AB;
  52          xdata volatile uint8_t in_ien                       _at_ 0xC7AC;
  53          xdata volatile uint8_t out_ien                      _at_ 0xC7AD;
  54          xdata volatile uint8_t usbien                       _at_ 0xC7AE;
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 2   

  55          xdata volatile uint8_t ep0cs                        _at_ 0xC7B4;
  56          xdata volatile uint8_t in0bc                        _at_ 0xC7B5;
  57          xdata volatile uint8_t in1cs                        _at_ 0xC7B6;
  58          xdata volatile uint8_t in1bc                        _at_ 0xC7B7;
  59          xdata volatile uint8_t out0bc                       _at_ 0xC7C5;
  60          xdata volatile uint8_t out1cs                       _at_ 0xC7C6;
  61          xdata volatile uint8_t out1bc                       _at_ 0xC7C7;
  62          xdata volatile uint8_t usbcs                        _at_ 0xC7D6;
  63          xdata volatile uint8_t inbulkval                    _at_ 0xC7DE;
  64          xdata volatile uint8_t outbulkval                   _at_ 0xC7DF;
  65          xdata volatile uint8_t inisoval                     _at_ 0xC7E0;
  66          xdata volatile uint8_t outisoval                    _at_ 0xC7E1;
  67          xdata volatile uint8_t setupbuf[8]                  _at_ 0xC7E8;
  68          
  69          static uint8_t usb_bm_state;
  70          static uint8_t usb_current_config;
  71          static uint8_t usb_current_alt_interface;
  72          static usb_state_t usb_state;
  73          
  74          static uint8_t code * packetizer_data_ptr;
  75          static uint8_t packetizer_data_size;
  76          static uint8_t packetizer_pkt_size;
  77          static uint8_t bmRequestType;
  78          
  79          bool packet_received;
  80          
  81          static void packetizer_isr_ep0_in();
  82          static void usb_process_get_status();
  83          static void usb_process_get_descriptor();
  84          
  85          static void delay_ms(uint16_t ms)
  86          {
  87   1          uint16_t i, j;
  88   1          
  89   1          for(i = 0; i < ms; i++ )
  90   1          {
  91   2              for( j = 0; j < 1403; j++)
  92   2              {
  93   3                  _nop_();
  94   3              }
  95   2          }
  96   1      }
  97          
  98          void usb_init(void)
  99          {
 100   1          // Setup state information
 101   1          usb_state = DEFAULT;
 102   1          usb_bm_state = 0;
 103   1      
 104   1          // Setconfig configuration information
 105   1          usb_current_config = 0;
 106   1          usb_current_alt_interface = 0;
 107   1          
 108   1          // Disconnect from USB-bus since we are in this routine from a power on and not a soft reset:
 109   1      
 110   1          usbcs |= 0x08;
 111   1          delay_ms(50);
 112   1          usbcs &= ~0x08;
 113   1      
 114   1          usbien = 0x1d;
 115   1          in_ien = 0x01;
 116   1          in_irq = 0x1f;
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 3   

 117   1          out_ien = 0x01;
 118   1          out_irq = 0x1f;
 119   1      
 120   1          // Setup the USB RAM with some OK default values:
 121   1          bout1addr = MAX_PACKET_SIZE_EP0/2;
 122   1          bout2addr = MAX_PACKET_SIZE_EP0/2 + USB_EP1_SIZE/2;
 123   1          bout3addr = MAX_PACKET_SIZE_EP0/2 + 2*USB_EP1_SIZE/2;
 124   1          bout4addr = MAX_PACKET_SIZE_EP0/2 + 3*USB_EP1_SIZE/2;
 125   1          bout5addr = MAX_PACKET_SIZE_EP0/2 + 4*USB_EP1_SIZE/2;
 126   1          binstaddr = 0xc0;
 127   1          bin1addr = MAX_PACKET_SIZE_EP0/2;
 128   1          bin2addr = MAX_PACKET_SIZE_EP0/2 + USB_EP1_SIZE/2;
 129   1          bin3addr = MAX_PACKET_SIZE_EP0/2 + 2*USB_EP1_SIZE/2;
 130   1          bin4addr = MAX_PACKET_SIZE_EP0/2 + 3*USB_EP1_SIZE/2;
 131   1          bin5addr = MAX_PACKET_SIZE_EP0/2 + 4*USB_EP1_SIZE/2;
 132   1      
 133   1          // Set all endpoints to not valid (except EP0IN and EP0OUT)
 134   1          inbulkval = 0x01;
 135   1          outbulkval = 0x01;
 136   1          inisoval = 0x00;
 137   1          outisoval = 0x00;
 138   1      
 139   1          in_ien |= 0x02;; 
 140   1          inbulkval |= 0x02;
 141   1          out_ien |= 0x02;
 142   1          outbulkval |= 0x02;
 143   1          out1bc = 0xff;
 144   1      }
 145          
 146          static void packetizer_isr_ep0_in()
 147          {
 148   1          uint8_t code* data_ptr; 
 149   1          uint8_t size, i;
 150   1          // We are getting a ep0in interupt when the host send ACK and do not have any more data to send
 151   1          if(packetizer_data_size == 0)
 152   1          {
 153   2              in0bc = 0;
 154   2              USB_EP0_HSNAK();
 155   2              return;
 156   2          }
 157   1      
 158   1          size = MIN(packetizer_data_size, packetizer_pkt_size);
 159   1      
 160   1          // Copy data to the USB-controller buffer
 161   1          data_ptr = packetizer_data_ptr;
 162   1          for(i = 0; i < size;i++)
 163   1          {
 164   2              in0buf[i] = *data_ptr++;
 165   2          }
 166   1      
 167   1          // Tell the USB-controller how many bytes to send
 168   1          // If a IN is received from host after this the USB-controller will send the data
 169   1          in0bc = size;
 170   1      
 171   1          // Update the packetizer data
 172   1          packetizer_data_ptr += size;
 173   1          packetizer_data_size -= size;
 174   1      }
 175          
 176          static void usb_process_get_status()
 177          {
 178   1          in0buf[0] = in0buf[1] = 0x00;
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 4   

 179   1          if((usb_state == ADDRESSED) && (setupbuf[4] == 0x00))
 180   1          {
 181   2              in0bc = 0x02;
 182   2          }
 183   1          else if(usb_state == CONFIGURED)
 184   1          {
 185   2              switch(bmRequestType)
 186   2              {
 187   3                  case 0x80: // Device
 188   3                      if((usb_bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP)
 189   3                      {
 190   4                          in0buf[0] = 0x02;
 191   4                      }
 192   3                      in0bc = 0x02;
 193   3                      break;
 194   3      
 195   3                  case 0x81: // Interface
 196   3                      in0bc = 0x02;
 197   3                      break;
 198   3      
 199   3                  case 0x82: // Endpoint
 200   3                      if((setupbuf[4] & 0x80) == 0x80) // IN endpoints
 201   3                          in0buf[0] = in1cs;
 202   3                      else
 203   3                          in0buf[0] = out1cs;
 204   3                      in0bc = 0x02;
 205   3                      break;
 206   3                  default:
 207   3                      USB_EP0_STALL();
 208   3                      break;
 209   3              }
 210   2          }
 211   1          else
 212   1          {
 213   2              // We should not be in this state
 214   2              USB_EP0_STALL();
 215   2          }
 216   1      }
 217          
 218          static void usb_process_get_descriptor()
 219          { 
 220   1          packetizer_pkt_size = MAX_PACKET_SIZE_EP0;
 221   1          // Switch on descriptor type
 222   1          switch(setupbuf[3])
 223   1          {
 224   2              case USB_DESC_DEVICE:
 225   2                  packetizer_data_ptr = (uint8_t*)&g_usb_dev_desc;
 226   2                  packetizer_data_size = MIN(setupbuf[6], sizeof(usb_dev_desc_t));
 227   2                  packetizer_isr_ep0_in();
 228   2                  break;
 229   2      
 230   2              case USB_DESC_CONFIGURATION:
 231   2                  // For now we just support one configuration. The asked configuration is stored in LSB(wValue)
             -.
 232   2                  packetizer_data_ptr = (uint8_t*)&g_usb_conf_desc;
 233   2                  packetizer_data_size = MIN(setupbuf[6], sizeof(usb_conf_desc_bootloader_t));
 234   2                  packetizer_isr_ep0_in();
 235   2                  break;
 236   2      
 237   2              case USB_DESC_STRING:
 238   2                  // For now we just support english as string descriptor language.
 239   2                  if(setupbuf[2] == 0x00)
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 5   

 240   2                  {
 241   3                      packetizer_data_ptr = string_zero;
 242   3                      packetizer_data_size = MIN(setupbuf[6], sizeof(string_zero));
 243   3                      packetizer_isr_ep0_in();
 244   3                  }
 245   2                  else
 246   2                  {
 247   3                      if((setupbuf[2] - 1) < USB_STRING_DESC_COUNT)
 248   3                      {
 249   4                          if (setupbuf[2] == 1)
 250   4                              packetizer_data_ptr = g_usb_string_desc_1;
 251   4                          else
 252   4                              packetizer_data_ptr = g_usb_string_desc_2;;
 253   4                          packetizer_data_size = MIN(setupbuf[6], packetizer_data_ptr[0]);
 254   4                          packetizer_isr_ep0_in();
 255   4                      }
 256   3                      else
 257   3                      {
 258   4                          USB_EP0_STALL();
 259   4                      }
 260   3                  }
 261   2                  break;
 262   2              case USB_DESC_INTERFACE:
 263   2              case USB_DESC_ENDPOINT:
 264   2              case USB_DESC_DEVICE_QUAL:
 265   2              case USB_DESC_OTHER_SPEED_CONF:
 266   2              case USB_DESC_INTERFACE_POWER:
 267   2                  USB_EP0_STALL();
 268   2                  break;
 269   2              default:
 270   2                  USB_EP0_HSNAK();
 271   2                  break;
 272   2          }
 273   1      }
 274          
 275          static void isr_sudav()
 276          {
 277   1          bmRequestType = setupbuf[0];
 278   1          if((bmRequestType & 0x60 ) == 0x00)
 279   1          {
 280   2              switch(setupbuf[1])
 281   2              {
 282   3                 case USB_REQ_GET_DESCRIPTOR:
 283   3                     usb_process_get_descriptor();
 284   3                     break;
 285   3      
 286   3                 case USB_REQ_GET_STATUS:
 287   3                     usb_process_get_status();
 288   3                     break;
 289   3      
 290   3                  case USB_REQ_SET_ADDRESS:
 291   3                     usb_state = ADDRESSED;
 292   3                     usb_current_config = 0x00;
 293   3                     break;
 294   3      
 295   3                  case USB_REQ_GET_CONFIGURATION:
 296   3                      switch(usb_state)
 297   3                      {
 298   4                          case ADDRESSED:
 299   4                              in0buf[0] = 0x00;
 300   4                              in0bc = 0x01;
 301   4                              break;
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 6   

 302   4                          case CONFIGURED:
 303   4                              in0buf[0] = usb_current_config;
 304   4                              in0bc = 0x01;
 305   4                              break;
 306   4                          case ATTACHED:
 307   4                          case POWERED:
 308   4                          case SUSPENDED:
 309   4                          case DEFAULT:
 310   4                          default:
 311   4                              USB_EP0_STALL();
 312   4                              break;
 313   4                      }
 314   3                      break;
 315   3      
 316   3                  case USB_REQ_SET_CONFIGURATION:
 317   3                      switch(setupbuf[2])
 318   3                      {
 319   4                          case 0x00:
 320   4                              usb_state = ADDRESSED;
 321   4                              usb_current_config = 0x00;
 322   4                              USB_EP0_HSNAK();
 323   4                              break;
 324   4                          case 0x01:
 325   4                              usb_state = CONFIGURED;
 326   4                              usb_bm_state |= USB_BM_STATE_CONFIGURED;
 327   4                              usb_current_config = 0x01;
 328   4                              USB_EP0_HSNAK();
 329   4                              break;
 330   4                          default:
 331   4                              USB_EP0_STALL();
 332   4                              break;
 333   4                      }
 334   3                     break;
 335   3      
 336   3                  case USB_REQ_GET_INTERFACE: // GET_INTERFACE
 337   3                      in0buf[0] = usb_current_alt_interface;
 338   3                      in0bc = 0x01;
 339   3                      break;
 340   3      
 341   3                  case USB_REQ_SET_DESCRIPTOR:
 342   3                  case USB_REQ_SET_INTERFACE: // SET_INTERFACE
 343   3                  case USB_REQ_SYNCH_FRAME:   // SYNCH_FRAME
 344   3                  default:
 345   3                      USB_EP0_STALL();
 346   3                      break;
 347   3              }
 348   2          } 
 349   1          // bmRequestType = 0 01 xxxxx : Data transfer direction: Host-to-device, Type: Class
 350   1          else if((bmRequestType & 0x60 ) == 0x20)  // Class request
 351   1          {
 352   2              if(setupbuf[6] != 0 && ((bmRequestType & 0x80) == 0x00))
 353   2              {
 354   3                  // If there is a OUT-transaction associated with the Control-Transfer-Write we call the callba
             -ck
 355   3                  // when the OUT-transaction is finished. Note that this function do not handle several out tra
             -nsactions.
 356   3                  out0bc = 0xff;
 357   3              }
 358   2              else
 359   2              {
 360   3                  USB_EP0_HSNAK();
 361   3              }
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 7   

 362   2          } 
 363   1          else  // Unknown request type
 364   1          {
 365   2              USB_EP0_STALL();
 366   2          }
 367   1      }
 368          
 369          void usb_irq(void)
 370          {
 371   1          //
 372   1          // Split case into an if and a switch to force Keil into not using a library function:
 373   1          if (ivec == INT_USBRESET)
 374   1          {
 375   2              usbirq = 0x10;
 376   2              usb_state = DEFAULT;
 377   2              usb_current_config = 0;
 378   2              usb_current_alt_interface = 0;
 379   2              usb_bm_state = 0;
 380   2          }
 381   1          else
 382   1          {
 383   2              switch(ivec)
 384   2              {
 385   3                  case INT_SUDAV:
 386   3                      usbirq = 0x01;
 387   3                      isr_sudav();
 388   3                      break;
 389   3                  case INT_SOF:
 390   3                      usbirq = 0x02;
 391   3                      break;
 392   3                  case INT_SUTOK:
 393   3                      usbirq = 0x04;
 394   3                      packetizer_data_ptr = NULL;
 395   3                      packetizer_data_size = 0;
 396   3                      packetizer_pkt_size = 0;
 397   3                      break;
 398   3                  case INT_SUSPEND:
 399   3                      usbirq = 0x08;
 400   3                      break;
 401   3                  case INT_EP0IN:
 402   3                      in_irq = 0x01;
 403   3                      packetizer_isr_ep0_in();
 404   3                      break;
 405   3                  case INT_EP0OUT:
 406   3                      out_irq = 0x01;
 407   3                      packetizer_data_size = 0;
 408   3                      //        req.misc_data = out0buf;
 409   3                      USB_EP0_HSNAK();
 410   3                      break;
 411   3                  case INT_EP1IN:
 412   3                      // Clear interrupt 
 413   3                      in_irq = 0x02;
 414   3                      in1cs = 0x02;
 415   3                      break;
 416   3                  case INT_EP1OUT:
 417   3                      // Clear interrupt
 418   3                      out_irq = 0x02;     
 419   3                      packet_received = true;
 420   3                      out1bc = 0xff;
 421   3                      break;
 422   3                  default:
 423   3                      break;
C51 COMPILER V8.12   USB                                                                   02/01/2011 15:40:55 PAGE 8   

 424   3              }
 425   2          }
 426   1      }
 427          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    826    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
