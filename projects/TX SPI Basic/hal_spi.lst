C51 COMPILER V8.12   HAL_SPI                                                               02/22/2011 12:45:34 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE HAL_SPI
OBJECT MODULE PLACED IN .\hal_spi.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\hal\nrf24le1\hal_spi.c LARGE BROWSE INCDIR(..\..\compiler\c51;..\..\h
                    -al\nrf24le1;..\..\hal;..\..\hal\nrf24l01p) DEBUG OBJECTEXTEND PRINT(.\hal_spi.lst) OBJECT(.\hal_spi.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5717 $
  12           */
  13          
  14           /** @file
  15           * @brief Implementation of  hal_spi
  16           */
  17          
  18          #include <reg24le1.h>
  19          #include "hal_spi.h"
  20          #include "nordic_common.h"
  21          
  22          void hal_spi_master_init(hal_spi_clkdivider_t ck, hal_spi_mode_t mode, hal_spi_byte_order_t bo)
  23          {
  24   1        SPIMCON0 = 0;                           // Default register settings
  25   1        switch (ck)                             // Set desired clock divider
  26   1        {
  27   2          case SPI_CLK_DIV2:
  28   2            SPIMCON0 |= (0x00 << 4);
  29   2            break;
  30   2          case SPI_CLK_DIV4:
  31   2            SPIMCON0 |= (0x01 << 4);
  32   2            break;
  33   2          case SPI_CLK_DIV8:
  34   2            SPIMCON0 |= (0x02 << 4);
  35   2            break;
  36   2          case SPI_CLK_DIV16:
  37   2            SPIMCON0 |= (0x03 << 4);
  38   2            break;
  39   2          case SPI_CLK_DIV32:
  40   2            SPIMCON0 |= (0x04 << 4);
  41   2            break;
  42   2          case SPI_CLK_DIV64:                   // We use clock divder 64 as default
  43   2          default:
  44   2            SPIMCON0 |= (0x05 << 4);
  45   2            break;  
  46   2        }
  47   1        switch(mode)                            // Set desired mode
  48   1        {
  49   2          case HAL_SPI_MODE_0:
  50   2            SPIMCON0 |= (0x00 << 1);
  51   2            break;
  52   2          case HAL_SPI_MODE_1:
  53   2            SPIMCON0 |= (0x01 << 1);
  54   2            break;
C51 COMPILER V8.12   HAL_SPI                                                               02/22/2011 12:45:34 PAGE 2   

  55   2          case HAL_SPI_MODE_2:
  56   2            SPIMCON0 |= (0x02 << 1);
  57   2            break;
  58   2          case HAL_SPI_MODE_3:      
  59   2            SPIMCON0 |= (0x03 << 1);
  60   2            break;
  61   2        }
  62   1        
  63   1        if(bo == HAL_SPI_LSB_MSB)               // Set desired data order
  64   1        {
  65   2          SPIMCON0 |= BIT_3;
  66   2        }
  67   1      
  68   1        SPIMCON0 |= BIT_0;                      // Enable SPI master
  69   1      }
  70          
  71          uint8_t hal_spi_master_read_write(uint8_t pLoad)
  72          {
  73   1        SPIMDAT = pLoad ;                       // Write data to SPI master
  74   1        while(!(SPIMSTAT & 0x04))               // Wait for data available in rx_fifo
  75   1        ;
  76   1        return SPIMDAT;                         // Return data register
  77   1      }
  78          
  79          void hal_spi_slave_init(hal_spi_mode_t mode, hal_spi_byte_order_t byte_order)
  80          {
  81   1        uint8_t temp;
  82   1        SPISCON0 = 0xF0; //default register settings
  83   1        I3FR=1; 
  84   1        INTEXP |= 0x01; //gate SPI slave interrupt to INT3
  85   1        SPISCON0 = 0x00; // pray?
  86   1       //  SPISCON0 &= ~(1<<4); // enable interrupt
  87   1      
  88   1        switch(mode)
  89   1        {
  90   2          case 0:
  91   2            SPISCON0 |= 0;
  92   2            break;
  93   2          case 1:
  94   2            SPISCON0 |= (1 << 1);
  95   2            break;
  96   2          case 2:
  97   2            SPISCON0 |= (2 << 1);
  98   2            break;
  99   2          case 3:      
 100   2            SPISCON0 |= (3 << 1);
 101   2            break;
 102   2        }
 103   1        SPISCON0 |= (~(byte_order & 0x01)) << 3; 
 104   1        
 105   1        SPISDAT = 0xAA;
 106   1        SPISDAT = 0xAA;
 107   1      
 108   1        //enable SPI slave
 109   1        SPISCON0 |= 0x01;
 110   1        while((SPISSTAT & 0x01))
 111   1        temp=SPISDAT; //flush rx fifo   */
 112   1      }
 113          
 114          uint8_t hal_spi_slave_rw(uint8_t pLoad)
 115          {
 116   1        hal_spi_slave_preload(pLoad);
C51 COMPILER V8.12   HAL_SPI                                                               02/22/2011 12:45:34 PAGE 3   

 117   1        return hal_spi_slave_read();
 118   1      
 119   1      }
 120          
 121          uint8_t sstat_shadow = 0;
 122          
 123          bool hal_spi_slave_csn_high()
 124          {
 125   1        static csn_high = true;
 126   1        sstat_shadow |= SPISSTAT;
 127   1      
 128   1        if(sstat_shadow & 0x20)
 129   1        {
 130   2          csn_high = true;  
 131   2        }
 132   1        else
 133   1        {
 134   2          if(sstat_shadow & 0x10)
 135   2          {
 136   3            csn_high = false;
 137   3          }
 138   2        }
 139   1        sstat_shadow &= ~0x30;
 140   1        
 141   1        return csn_high;
 142   1      }
 143          
 144          bool spi_slave_data_ready()
 145          {
 146   1        sstat_shadow |= SPISSTAT;
 147   1      
 148   1        if(sstat_shadow & 0x01)
 149   1        {
 150   2          return true;  
 151   2        }
 152   1        else
 153   1        {
 154   2          return false;
 155   2        }   
 156   1      }
 157          
 158          uint8_t hal_spi_slave_read()
 159          {
 160   1        while(!(sstat_shadow & 0x01))
 161   1        {
 162   2          sstat_shadow |= SPISSTAT;
 163   2        }
 164   1        sstat_shadow &= ~0x01;
 165   1      
 166   1        return SPISDAT;
 167   1      }
 168          
 169          void hal_spi_slave_preload(uint8_t pLoad)
 170          {
 171   1        SPISDAT=pLoad;
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    260    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3       1
C51 COMPILER V8.12   HAL_SPI                                                               02/22/2011 12:45:34 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
