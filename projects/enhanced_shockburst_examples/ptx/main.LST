C51 COMPILER V9.02   MAIN                                                                  04/06/2011 12:27:57 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE INCDIR(..\..\..\hal\nrf24le1;..\..\..\hal\nrf24l01p;..\
                    -..\..\hal;..\..\..\compiler\c51) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 5679 $
  12           */
  13          
  14          /** @file
  15           * @brief Enhanced ShockBurst Primary Transmitter example
  16           * @defgroup esb_ptx_example Enhanced ShockBurst Primary Transmitter (PTX) example
  17           * @{
  18           * @ingroup nrf_examples
  19           * 
  20           * @brief This example sends packets continuously. The contents of P0 is 
  21           * sent in the first payload byte (byte 0). 
  22           *
  23           * The example shows the minimum required setup for transmitting packets to a 
  24           * primary receiver (PRX) device.  
  25           * 
  26           * The following default radio parameters are being used:
  27           * - RF channel 2
  28           * - 2 Mbps data rate
  29           * - TX address 0xE7E7E7E7E7 
  30           * - 1 byte CRC  
  31           * 
  32           * The project @ref esb_prx_example can be used as a counterpart for receiving the data.
  33           * 
  34          */
  35          
  36          #ifdef MCU_NRF24LE1
  37          #include <reg24le1.h>
  38          #include <hal_spi.h>
  39          #endif
  40          
  41          #ifdef MCU_NRF24LU1P
              #include <Nordic\reg24lu1.h>
              #endif
  44          
  45          #include <nordic_common.h>
  46          #include <intrins.h>
  47          #include <stdint.h>
  48          #include <stdbool.h>
  49          #include "hal_nrf.h"
  50          #include "hal_nrf_hw.h"
  51          
  52          #define MAXPAYLOAD 27
  53          #define MAXBLOCKS  4
  54          #define CALC_PAYLOAD_PTR(bl) payload+bl*MAXPAYLOAD
C51 COMPILER V9.02   MAIN                                                                  04/06/2011 12:27:57 PAGE 2   

  55          
  56          
  57          sbit P0_0 = P0^0;
  58          sbit P0_4 = P0^4;
  59          sbit P0_5 = P0^5;
  60          sbit P0_6 = P0^6;
  61          sbit P0_7 = P0^7;
  62          
  63          // Global variables
  64          data bool radio_busy;
  65          data uint8_t temp = 0;
  66          data uint8_t block = 0;
  67          data uint8_t byteCnt = MAXBLOCKS*MAXPAYLOAD;
  68          data uint8_t blockAcquired = 0;
  69          data uint8_t blockNeedsSending = 0;
  70          data uint8_t payload[MAXBLOCKS*MAXPAYLOAD];
  71          data uint8_t data* payloadspi;
  72          data uint8_t data* payloadtx;
  73          
  74          void main()
  75          {
  76   1      
  77   1        #ifdef MCU_NRF24LU1P
                   USBSLP = 0x01;  // disable usb
                   P0DIR = (1<<3)|(1<<1)|(1<<0);
                       P0ALT = 0x0F;
                       P0EXP = 0x02; // Slave SPI for P0
                       SSCONF = 0x01; //Enable slave SPI
                       
                       // Enable radio SPI
                       RFCTL = 0x10;
                        I3FR = 1;             // rising edge SPI ready detect
                        P0_0 = 0;
                        INTEXP = 0x01; //Slave SPI Interrupt
                #else
  90   1              P0DIR =  ~((1<<4)|(1<<0));
  91   1              SPISCON0 = 0x40;
  92   1              I3FR = 1;             // rising edge SPI ready detect
  93   1              P0_0 = 0;
  94   1              INTEXP = 0x01; //Slave SPI Interrupt
  95   1              
  96   1              SPISCON0 |= 0x01;
  97   1        #endif
  98   1      
  99   1        // Enable the radio clock
 100   1        RFCKEN = 1;
 101   1        SPI = 1; // Enable SPI Interrupt
 102   1        // Enable RF interrupt
 103   1        RF = 1; 
 104   1      
 105   1       //  ET0 = 1; // enable timer interrupt
 106   1        // EX0 = 1; 
 107   1        // Enable global interrupt
 108   1        EA = 1;
 109   1      
 110   1        // Power up radio
 111   1              hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 112   1              hal_nrf_enable_dynamic_ack(true); // lets us disable ack, saves time.
 113   1              hal_nrf_write_reg (SETUP_RETR, 0);
 114   1              hal_nrf_write_reg (EN_AA, 0);
 115   1      //      hal_nrf_set_output_power(HAL_NRF_18DBM);
 116   1      //      hal_nrf_set_auto_retr(0,250); // disable auto_retry
C51 COMPILER V9.02   MAIN                                                                  04/06/2011 12:27:57 PAGE 3   

 117   1      //      hal_nrf_close_pipe(HAL_NRF_ALL);        
 118   1      
 119   1        hal_nrf_write_tx_payload(payload, MAXPAYLOAD); 
 120   1        hal_nrf_write_tx_payload(payload, MAXPAYLOAD);
 121   1        CE_HIGH(); // Sends packet 
 122   1        while(1)
 123   1        {
 124   2      
 125   2              while (!blockNeedsSending);
 126   2              
 127   2              // Write payload to radio TX FIFO
 128   2              while(radio_busy);                       
 129   2              
 130   2              blockNeedsSending = 0;
 131   2              
 132   2              P0_4 = 1;
 133   2                                      //payload+block*MAXPAYLOAD;
 134   2              switch(block)
 135   2              {
 136   3                case 0:
 137   3                      payloadtx = CALC_PAYLOAD_PTR(2);
 138   3                      break;
 139   3                case 1:
 140   3                      payloadtx = CALC_PAYLOAD_PTR(0);
 141   3                      break;
 142   3                case 2:
 143   3                      payloadtx = CALC_PAYLOAD_PTR(1);
 144   3                      break;
 145   3              }
 146   2      
 147   2          hal_nrf_write_tx_payload(payloadtx, MAXPAYLOAD);
 148   2      
 149   2              radio_busy = true;
 150   2              
 151   2              P0_4 = 0;
 152   2                      
 153   2          // Toggle radio CE signal to start transmission 
 154   2          CE_HIGH();
 155   2        //  CE_PULSE();                                 
 156   2         
 157   2        }                                           
 158   1      } 
 159          
 160                  void slave_spi() interrupt INTERRUPT_SPI
*** ERROR C141 IN LINE 160 OF MAIN.C: syntax error near 'INTERRUPT_SPI', expected 'const'
 161                  {
*** ERROR C132 IN LINE 161 OF MAIN.C: 'INTERRUPT_SPI': not in formal parameter list
*** ERROR C141 IN LINE 161 OF MAIN.C: syntax error near '{'
 162                    P0_5 = 1;
*** ERROR C244 IN LINE 162 OF MAIN.C: 'P0_5': can't initialize, bad type or class
*** ERROR C132 IN LINE 162 OF MAIN.C: 'P0_5': not in formal parameter list
 163                    
 164                    if(byteCnt==0)
*** ERROR C141 IN LINE 164 OF MAIN.C: syntax error near 'if'
*** ERROR C141 IN LINE 164 OF MAIN.C: syntax error near '==', expected ')'
 165                    {
 166                          byteCnt = MAXPAYLOAD;
*** ERROR C279 IN LINE 166 OF MAIN.C: 'byteCnt': multiple initialization
*** ERROR C231 IN LINE 166 OF MAIN.C: 'byteCnt': redefinition
*** ERROR C231 IN LINE 166 OF MAIN.C: 'byteCnt': redefinition
 167                          ++block;
*** ERROR C141 IN LINE 167 OF MAIN.C: syntax error near '++'
C51 COMPILER V9.02   MAIN                                                                  04/06/2011 12:27:57 PAGE 4   

*** ERROR C231 IN LINE 167 OF MAIN.C: 'block': redefinition
 168                          blockNeedsSending = 1;
*** ERROR C279 IN LINE 168 OF MAIN.C: 'blockNeedsSending': multiple initialization
*** ERROR C231 IN LINE 168 OF MAIN.C: 'blockNeedsSending': redefinition
*** ERROR C231 IN LINE 168 OF MAIN.C: 'blockNeedsSending': redefinition
 169                          if(block==3)
*** ERROR C141 IN LINE 169 OF MAIN.C: syntax error near 'if'
*** ERROR C141 IN LINE 169 OF MAIN.C: syntax error near '==', expected ')'
 170                          {
 171                                  payloadspi = payload;
*** ERROR C231 IN LINE 171 OF MAIN.C: 'payloadspi': redefinition
*** ERROR C231 IN LINE 171 OF MAIN.C: 'payloadspi': redefinition
 172                                  block=0;
*** ERROR C279 IN LINE 172 OF MAIN.C: 'block': multiple initialization
*** ERROR C231 IN LINE 172 OF MAIN.C: 'block': redefinition
*** ERROR C231 IN LINE 172 OF MAIN.C: 'block': redefinition
 173                          }
*** ERROR C141 IN LINE 173 OF MAIN.C: syntax error near '}'
 174                    } 
 175                   
 176                    *((unsigned char data *)(payloadspi)) = SSDATA;
*** ERROR C141 IN LINE 176 OF MAIN.C: syntax error near 'unsigned'
*** ERROR C141 IN LINE 176 OF MAIN.C: syntax error near ')'
*** ERROR C129 IN LINE 176 OF MAIN.C: missing ';' before ')'
 177                    payloadspi++;
 178                    byteCnt--;
 179                    P0_5 = 0;
 180                  }
 181          
 182          // Radio interrupt
 183          void rf_irq() interrupt INTERRUPT_RFIRQ
 184          {
 185            uint8_t data irq_flags;
 186             P0_4 = 1;
 187            // Read and clear IRQ flags from radio
 188              CSN_LOW();
 189            // retval = hal_nrf_rw(W_REGISTER + reg);
 190          
 191            RFDAT = W_REGISTER + STATUS;
 192            RFSPIF = 0;     // ! IMPORTANT ! Clear RF SPI ready flag
 193                            // after data written to RFDAT..
 194            while(!RFSPIF); // wait for byte transfer finished
 195              
 196            irq_flags = RFDAT;   // return SPI read value
 197          
 198          
 199            RFDAT = (BIT_6|BIT_5|BIT_4);
 200            RFSPIF = 0;     // ! IMPORTANT ! Clear RF SPI ready flag
 201                            // after data written to RFDAT..
 202            while(!RFSPIF); // wait for byte transfer finished
 203              
 204            // retval = RFDAT;   // return SPI read value
 205          
 206           //  hal_nrf_rw(value);
 207            CSN_HIGH();
 208            irq_flags = irq_flags & (BIT_6|BIT_5|BIT_4);
 209           // irq_flags = hal_nrf_get_clear_irq_flags(); 
 210          
 211            switch(irq_flags)
 212            {
 213              // Transmission success
 214              case (1 << HAL_NRF_TX_DS):
C51 COMPILER V9.02   MAIN                                                                  04/06/2011 12:27:57 PAGE 5   

 215                radio_busy = false;
 216                // Data has been sent
 217                break;
 218              // Transmission failed (maximum re-transmits)
 219              case (1 << HAL_NRF_MAX_RT):
 220                // When a MAX_RT interrupt occurs the TX payload will not be removed from the TX FIFO. 
 221                // If the packet is to be discarded this must be done manually by flushing the TX FIFO.
 222                // Alternatively, CE_PULSE() can be called re-starting transmission of the payload.
 223                // (Will only be possible after the radio irq flags are cleared) 
 224                
 225                    // hal_nrf_flush_tx();
 226                  CSN_LOW();
 227                          RFDAT = FLUSH_TX;
 228                          RFSPIF = 0;     // ! IMPORTANT ! Clear RF SPI ready flag
 229                            // after data written to RFDAT..
 230                          while(!RFSPIF); // wait for byte transfer finished
 231                          
 232                          CSN_HIGH();
 233          
 234                    radio_busy = false;
 235                break;
 236            }
 237          
 238            P0_4 = 0;
 239          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  26 ERROR(S)
