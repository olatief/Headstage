C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE HAL_NRF
OBJECT MODULE PLACED IN .\hal_nrf.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\hal\nrf24l01p\hal_nrf.c LARGE BROWSE INCDIR(..\..\..\hal\nrf24le1;
                    -..\..\..\hal\nrf24l01p;..\..\..\hal;..\..\..\compiler\c51) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\hal_nrf.lst) 
                    -OBJECT(.\hal_nrf.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5717 $
  12           */
  13          
  14           /** @file
  15            * @brief Implementation of hal_nrf
  16           */
  17          /*lint -t2 */
  18          /*lint -esym( 534, hal_nrf_write_reg ) */
  19          /*lint -esym( 534, hal_nrf_rw ) */
  20          /*lint -e708 */
  21          /*lint -e46 */
  22          
  23          #include <stdint.h>
  24          #include <stdbool.h>
  25          
  26          #include "nordic_common.h"
  27          #include "hal_nrf.h"
  28          
  29          sbit P0_0 = P0^0;
  30          sbit P0_4 = P0^4;
  31          sbit P0_5 = P0^5;
  32          sbit P0_6 = P0^6;
  33          sbit P0_7 = P0^7;
  34          
  35          #define SET_BIT(pos) ((uint8_t) (1<<( (uint8_t) (pos) )))
  36          #define UINT8(t) ((uint8_t) (t))
  37          
  38          /** Basis function read_reg.
  39           * Use this function to read the contents
  40           * of one radios register.
  41           *
  42           * @param reg Register to read
  43           * @return Register contents
  44          */
  45          static uint8_t hal_nrf_read_reg(uint8_t reg);
  46          
  47          /** Basis function write_reg.
  48           * Use this function to write a new value to
  49           * a radio register.
  50           *
  51           * @param reg Register to write
  52           * @param value New value to write
  53           * @return Status register
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 2   

  54          */
  55          static uint8_t hal_nrf_write_reg(uint8_t data reg, uint8_t data value);
  56          
  57          /** Basis function, read_multibyte register .
  58           * Use this function to read multiple bytes from
  59           * a multibyte radio-register
  60           *
  61           * @param reg Multibyte register to read from
  62           * @param *pbuf Pointer to buffer in which to store read bytes to
  63           *
  64           * @return pipe# of received data (MSB), if operation used by a hal_nrf_read_rx_pload
  65           * @return length of read data (LSB), either for hal_nrf_read_rx_pload or
  66           * for hal_nrf_get_address.
  67          */
  68          //uint16_t hal_nrf_read_multibyte_reg(uint8_t data reg, uint8_t data *pbuf);
  69          
  70          /** Basis function, write_multibyte register.
  71           * Use this function to write multiple bytes to
  72           * a multiple radio register.
  73           *
  74           * @param reg Register to write
  75           * @param *pbuf pointer to buffer in which data to write is
  76           * @param length \# of bytes to write
  77          */
  78          static void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t data *pbuf, uint8_t data length);
  79          
  80          /**
  81           * Typedef for the CONFIG register. Contains all the bitaddressable 
  82           * settings in the bits struct and the value sent to the radio in the uint8_t
  83           */
  84          typedef union {
  85            uint8_t value;
  86                  struct {
  87                          uint8_t prim_rx : 1;
  88                          uint8_t pwr_up : 1;
  89                          uint8_t crc0 : 1;
  90                          uint8_t en_crc : 1;
  91                          uint8_t mask_max_rt : 1;
  92                          uint8_t mask_tx_ds : 1;
  93                          uint8_t mask_rx_dr : 1;
  94                          const uint8_t : 1;
  95                  } bits;
  96          } config_t;
  97          
  98          /**
  99           * Typedef for the EN_AA, EN_RXADDR and DYNPD registers. Contains all the 
 100           * bitaddressable settings in the bits struct and the value sent to the radio 
 101           * in the uint8_t 
 102           */
 103          typedef union {
 104            uint8_t value;
 105            struct {
 106              uint8_t pipe_0 : 1;
 107              uint8_t pipe_1 : 1;
 108              uint8_t pipe_2 : 1;
 109              uint8_t pipe_3 : 1;
 110              uint8_t pipe_4 : 1;
 111              uint8_t pipe_5 : 1;
 112              const uint8_t : 2;
 113            } bits;
 114          } en_pipes_t;
 115          
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 3   

 116          /**
 117           * Typedef for the SETUP_AW register. Contains all the bitaddressable 
 118           * settings in the bits struct and the value sent to the radio in the uint8_t
 119           */
 120          typedef union {
 121            uint8_t value;
 122                  struct {
 123                          uint8_t aw : 2;
 124                          const uint8_t : 6;              
 125                  } bits;
 126          } setup_aw_t;
 127          
 128          /**
 129           * Typedef for the SETUP_RETR register. Contains all the bitaddressable 
 130           * settings in the bits struct and the value sent to the radio in the uint8_t
 131           */
 132          typedef union {
 133            uint8_t value;
 134                  struct {
 135                          uint8_t arc : 4;
 136                          uint8_t ard : 4;
 137                  } bits;
 138          } setup_retr_t;
 139          
 140          /**
 141           * Typedef for the RF_CH register. Contains all the bitaddressable 
 142           * settings in the bits struct and the value sent to the radio in the uint8_t
 143           */
 144          typedef union {
 145            uint8_t value;
 146                  struct {
 147                          uint8_t rf_ch : 7;
 148                          const uint8_t : 1;
 149                  } bits;
 150          } rf_ch_t;
 151          
 152          /**
 153           * Typedef for the RF_SETUP register. Contains all the bitaddressable 
 154           * settings in the bits struct and the value sent to the radio in the uint8_t
 155           */
 156          typedef union {
 157            uint8_t value;
 158                  struct {
 159                          const uint8_t : 1;
 160                          uint8_t rf_pwr : 2;
 161                          uint8_t rf_dr_high : 1;
 162                          uint8_t pll_lock : 1;
 163                          uint8_t rf_dr_low : 1;
 164              const uint8_t : 1;
 165              uint8_t cont_wave : 1;
 166                  } bits;
 167          } rf_setup_t;
 168          
 169          /**
 170           * Typedef for the RX_PW_Px registers. Contains all the bitaddressable 
 171           * settings in the bits struct and the value sent to the radio in the uint8_t
 172           */
 173          typedef union {
 174            uint8_t value;
 175                  struct {
 176                          uint8_t rx_pw : 6;
 177                          const uint8_t : 2;
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 4   

 178                  } bits;
 179          } rx_pw_t;
 180          
 181          /**
 182           * Typedef for the FEATURE register. Contains all the bitaddressable 
 183           * settings in the bits struct and the value sent to the radio in the uint8_t
 184           */
 185          typedef union {
 186            uint8_t value;
 187                  struct {
 188                          uint8_t en_dyn_ack : 1;
 189                          uint8_t en_ack_pay : 1;
 190                          uint8_t en_dpl : 1;
 191                          const uint8_t : 5;
 192                  } bits;
 193          } feature_t;
 194          
 195          void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
 196          {
 197   1        config_t config;
 198   1        config.value = hal_nrf_read_reg (CONFIG);
 199   1      
 200   1        if(op_mode == HAL_NRF_PRX)
 201   1        {
 202   2          config.bits.prim_rx = 1;
 203   2        }
 204   1        else
 205   1        {
 206   2          config.bits.prim_rx = 0;
 207   2        }
 208   1      
 209   1        hal_nrf_write_reg (CONFIG, config.value);
 210   1      }
 211          
 212          void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
 213          {
 214   1        config_t config;
 215   1        config.value = hal_nrf_read_reg (CONFIG);
 216   1      
 217   1        if(pwr_mode == HAL_NRF_PWR_UP)
 218   1        {
 219   2          config.bits.pwr_up = 1;
 220   2        }
 221   1        else
 222   1        {
 223   2          config.bits.pwr_up = 0;
 224   2        }
 225   1        
 226   1        hal_nrf_write_reg (CONFIG, config.value);
 227   1      }
 228          
 229          void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
 230          {
 231   1        config_t config;
 232   1        config.value = hal_nrf_read_reg (CONFIG);
 233   1      
 234   1              switch (crc_mode)
 235   1              {
 236   2                      case HAL_NRF_CRC_OFF:
 237   2                              config.bits.en_crc = 0;
 238   2                              break;
 239   2                      case HAL_NRF_CRC_8BIT:
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 5   

 240   2                              config.bits.en_crc = 1;
 241   2                              config.bits.crc0 = 0;
 242   2                              break;
 243   2                      case HAL_NRF_CRC_16BIT:
 244   2                              config.bits.en_crc = 1;
 245   2                              config.bits.crc0 = 1;
 246   2                              break;
 247   2                      default:
 248   2                              break;
 249   2              } 
 250   1      
 251   1        hal_nrf_write_reg (CONFIG, config.value);
 252   1      }
 253          
 254          void hal_nrf_set_irq_mode(hal_nrf_irq_source_t int_source, bool irq_state)
 255          {
 256   1        config_t config;
 257   1        config.value = hal_nrf_read_reg (CONFIG);
 258   1      
 259   1              switch (int_source)
 260   1              {
 261   2                      case HAL_NRF_MAX_RT:
 262   2                              config.bits.mask_max_rt = irq_state ? 0 : 1;
 263   2            break;
 264   2          case HAL_NRF_TX_DS:
 265   2            config.bits.mask_tx_ds = irq_state ? 0 : 1;
 266   2            break;
 267   2          case HAL_NRF_RX_DR:
 268   2            config.bits.mask_rx_dr = irq_state ? 0 : 1;
 269   2            break;
 270   2        }
 271   1        
 272   1        hal_nrf_write_reg (CONFIG, config.value);
 273   1      }
 274          
 275          uint8_t hal_nrf_get_clear_irq_flags(void)
 276          {
 277   1        uint8_t retval;
 278   1        
 279   1        retval = hal_nrf_write_reg (STATUS, (BIT_6|BIT_5|BIT_4));
 280   1      
 281   1        return (retval & (BIT_6|BIT_5|BIT_4));
 282   1      }
 283          
 284          void hal_nrf_clear_irq_flag(hal_nrf_irq_source_t int_source)
 285          {
 286   1        hal_nrf_write_reg (STATUS, SET_BIT(int_source));
 287   1      }
 288          
 289          uint8_t hal_nrf_get_irq_flags(void)
 290          {
 291   1        return hal_nrf_nop() & (BIT_6|BIT_5|BIT_4);
 292   1      }
 293          
 294          void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, bool auto_ack)
 295          {
 296   1        en_pipes_t en_rxaddr;
 297   1        en_pipes_t en_aa;
 298   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 299   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 300   1      
 301   1        switch(pipe_num)
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 6   

 302   1        {
 303   2          case HAL_NRF_PIPE0:
 304   2          case HAL_NRF_PIPE1:
 305   2          case HAL_NRF_PIPE2:
 306   2          case HAL_NRF_PIPE3:
 307   2          case HAL_NRF_PIPE4:
 308   2          case HAL_NRF_PIPE5:
 309   2            en_rxaddr.value = en_rxaddr.value | SET_BIT(pipe_num);
 310   2      
 311   2            if(auto_ack)
 312   2            {
 313   3              en_aa.value = en_aa.value | SET_BIT(pipe_num);
 314   3            }
 315   2            else
 316   2            {
 317   3              en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
 318   3            }
 319   2            break;
 320   2      
 321   2          case HAL_NRF_ALL:
 322   2            en_rxaddr.value = ~(BIT_6|BIT_7);
 323   2            
 324   2            if(auto_ack)
 325   2            {
 326   3              en_aa.value = ~(BIT_6|BIT_7);
 327   3            }
 328   2            else
 329   2            {
 330   3              en_aa.value = 0;
 331   3            }
 332   2            break;
 333   2            
 334   2          default:
 335   2            break;
 336   2        }
 337   1      
 338   1        hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 339   1        hal_nrf_write_reg (EN_AA, en_aa.value);
 340   1      }
 341          
 342          void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
 343          {
 344   1        en_pipes_t en_rxaddr;
 345   1        en_pipes_t en_aa;
 346   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 347   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 348   1      
 349   1        switch(pipe_num)
 350   1        {
 351   2          case HAL_NRF_PIPE0:
 352   2          case HAL_NRF_PIPE1:
 353   2          case HAL_NRF_PIPE2:
 354   2          case HAL_NRF_PIPE3:
 355   2          case HAL_NRF_PIPE4:
 356   2          case HAL_NRF_PIPE5:
 357   2            en_rxaddr.value = en_rxaddr.value & ~SET_BIT(pipe_num);
 358   2            en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
 359   2            break;
 360   2          
 361   2          case HAL_NRF_ALL:
 362   2            en_rxaddr.value = 0;
 363   2            en_aa.value = 0;
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 7   

 364   2            break;
 365   2            
 366   2          default:
 367   2            break;
 368   2        }
 369   1      
 370   1        hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 371   1        hal_nrf_write_reg (EN_AA, en_aa.value);
 372   1      }
 373          
 374          void hal_nrf_set_address(const hal_nrf_address_t address, const uint8_t *addr)
 375          {
 376   1        switch(address)
 377   1        {
 378   2          case HAL_NRF_TX:
 379   2          case HAL_NRF_PIPE0:
 380   2          case HAL_NRF_PIPE1:
 381   2            hal_nrf_write_multibyte_reg(W_REGISTER + RX_ADDR_P0 + (uint8_t) address, addr, hal_nrf_get_address_w
             -idth());
 382   2            break;
 383   2          case HAL_NRF_PIPE2:
 384   2          case HAL_NRF_PIPE3:
 385   2          case HAL_NRF_PIPE4:
 386   2          case HAL_NRF_PIPE5:
 387   2            hal_nrf_write_reg (RX_ADDR_P0 + (uint8_t) address, *addr);
 388   2            break;
 389   2      
 390   2          default:
 391   2            break;
 392   2        }
 393   1      }
 394          
 395          uint8_t hal_nrf_get_address(uint8_t address, uint8_t *addr)
 396          {
 397   1        switch (address)
 398   1        {
 399   2          case HAL_NRF_PIPE0:
 400   2          case HAL_NRF_PIPE1:
 401   2          case HAL_NRF_TX:
 402   2            return hal_nrf_read_multibyte_reg (address, addr);
 403   2          default:
 404   2            *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
 405   2            return 1;
 406   2        }
 407   1      }
 408          
 409          void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay)
 410          {
 411   1        setup_retr_t setup_retr;
 412   1        setup_retr.bits.ard = (delay / 250) - 1;
 413   1        setup_retr.bits.arc = retr;
 414   1      
 415   1        hal_nrf_write_reg (SETUP_RETR, setup_retr.value);
 416   1      }
 417          
 418          void hal_nrf_set_address_width(hal_nrf_address_width_t aw)
 419          {
 420   1        setup_aw_t setup_aw;
 421   1        setup_aw.bits.aw = (uint8_t)aw - 2;
 422   1      
 423   1        hal_nrf_write_reg (SETUP_AW, setup_aw.value);
 424   1      }
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 8   

 425          
 426          uint8_t hal_nrf_get_address_width (void)
 427          {
 428   1        return hal_nrf_read_reg (SETUP_AW) + 2;
 429   1      }
 430          
 431          void hal_nrf_set_rx_payload_width(uint8_t pipe_num, uint8_t pload_width)
 432          {
 433   1        hal_nrf_write_reg (RX_PW_P0 + pipe_num, pload_width);
 434   1      }
 435          
 436          uint8_t hal_nrf_get_pipe_status(uint8_t pipe_num)
 437          {
 438   1        en_pipes_t en_rxaddr;
 439   1        en_pipes_t en_aa;
 440   1        uint8_t en_rx_r, en_aa_r;
 441   1        
 442   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 443   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 444   1      
 445   1        switch (pipe_num)
 446   1        {
 447   2          case 0:
 448   2            en_rx_r = en_rxaddr.bits.pipe_0;
 449   2            en_aa_r = en_aa.bits.pipe_0;
 450   2            break;
 451   2          case 1:
 452   2            en_rx_r = en_rxaddr.bits.pipe_1;
 453   2            en_aa_r = en_aa.bits.pipe_1;
 454   2            break;
 455   2          case 2:
 456   2            en_rx_r = en_rxaddr.bits.pipe_2;
 457   2            en_aa_r = en_aa.bits.pipe_2;
 458   2            break;
 459   2          case 3:
 460   2            en_rx_r = en_rxaddr.bits.pipe_3;
 461   2            en_aa_r = en_aa.bits.pipe_3;
 462   2            break;
 463   2          case 4:
 464   2            en_rx_r = en_rxaddr.bits.pipe_4;
 465   2            en_aa_r = en_aa.bits.pipe_4;
 466   2            break;
 467   2          case 5:
 468   2            en_rx_r = en_rxaddr.bits.pipe_5;
 469   2            en_aa_r = en_aa.bits.pipe_5;
 470   2            break;
 471   2          default:
 472   2            en_rx_r = 0;
 473   2            en_aa_r = 0;
 474   2            break;
 475   2        }
 476   1        
 477   1        return (uint8_t)(en_aa_r << 1) + en_rx_r;
 478   1      }
 479          
 480          uint8_t hal_nrf_get_auto_retr_status(void)
 481          {
 482   1        return hal_nrf_read_reg(OBSERVE_TX);
 483   1      }
 484          
 485          uint8_t hal_nrf_get_packet_lost_ctr(void)
 486          {
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 9   

 487   1        return ((hal_nrf_read_reg(OBSERVE_TX) & (BIT_7|BIT_6|BIT_5|BIT_4)) >> 4);
 488   1      }
 489          
 490          uint8_t hal_nrf_get_rx_payload_width(uint8_t pipe_num)
 491          {
 492   1        uint8_t pw;
 493   1      
 494   1        switch (pipe_num)
 495   1        {
 496   2          case 0:
 497   2            pw = hal_nrf_read_reg (RX_PW_P0);
 498   2            break;      
 499   2          case 1:
 500   2            pw = hal_nrf_read_reg (RX_PW_P1);
 501   2            break;
 502   2          case 2:
 503   2            pw = hal_nrf_read_reg (RX_PW_P2);
 504   2            break;
 505   2          case 3:
 506   2            pw = hal_nrf_read_reg (RX_PW_P3);
 507   2            break;
 508   2          case 4:
 509   2            pw = hal_nrf_read_reg (RX_PW_P4);
 510   2            break;
 511   2          case 5:
 512   2            pw = hal_nrf_read_reg (RX_PW_P5);
 513   2            break;
 514   2          default:
 515   2            pw = 0;
 516   2            break;
 517   2        }
 518   1      
 519   1        return pw;
 520   1      }
 521          
 522          void hal_nrf_set_rf_channel(uint8_t channel)
 523          {
 524   1        rf_ch_t rf_ch;
 525   1        rf_ch.bits.rf_ch = channel;
 526   1        
 527   1        hal_nrf_write_reg (RF_CH, rf_ch.value);
 528   1      }
 529          
 530          void hal_nrf_set_output_power(hal_nrf_output_power_t power)
 531          {
 532   1        rf_setup_t rf_setup;
 533   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 534   1      
 535   1        rf_setup.bits.rf_pwr = (uint8_t)power;
 536   1        
 537   1        hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 538   1      }
 539          
 540          void hal_nrf_set_datarate(hal_nrf_datarate_t datarate)
 541          {
 542   1        rf_setup_t rf_setup;
 543   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 544   1        
 545   1        switch (datarate)
 546   1        {
 547   2          case HAL_NRF_250KBPS:
 548   2            rf_setup.bits.rf_dr_low = 1;
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 10  

 549   2            rf_setup.bits.rf_dr_high = 0;
 550   2            break;
 551   2          case HAL_NRF_1MBPS:
 552   2            rf_setup.bits.rf_dr_low = 0;
 553   2            rf_setup.bits.rf_dr_high = 0;
 554   2            break;
 555   2          case HAL_NRF_2MBPS:
 556   2          default:
 557   2            rf_setup.bits.rf_dr_low = 0;
 558   2            rf_setup.bits.rf_dr_high = 1;
 559   2            break;
 560   2        }
 561   1        
 562   1        hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 563   1      }
 564          
 565          bool hal_nrf_rx_fifo_empty(void)
 566          {
 567   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> RX_EMPTY) & 1);
 568   1      }
 569          
 570          bool hal_nrf_rx_fifo_full(void)
 571          {
 572   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS)>> RX_FULL) & 1);
 573   1      }
 574          
 575          bool hal_nrf_tx_fifo_empty(void)
 576          {
 577   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_EMPTY) & 1);
 578   1      }
 579          
 580          bool hal_nrf_tx_fifo_full(void)
 581          {
 582   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_FIFO_FULL) & 1);
 583   1      }
 584          
 585          uint8_t hal_nrf_get_tx_fifo_status(void)
 586          {
 587   1        return ((hal_nrf_read_reg(FIFO_STATUS) & ((1<<TX_FIFO_FULL)|(1<<TX_EMPTY))) >> 4);
 588   1      }
 589          
 590          uint8_t hal_nrf_get_rx_fifo_status(void)
 591          {
 592   1        return (hal_nrf_read_reg(FIFO_STATUS) & ((1<<RX_FULL)|(1<<RX_EMPTY)));
 593   1      }
 594          
 595          uint8_t hal_nrf_get_fifo_status(void)
 596          {
 597   1        return hal_nrf_read_reg(FIFO_STATUS);
 598   1      }
 599          
 600          uint8_t hal_nrf_get_transmit_attempts(void)
 601          {
 602   1        return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_3|BIT_2|BIT_1|BIT_0));
 603   1      }
 604          
 605          bool hal_nrf_get_carrier_detect(void)
 606          {
 607   1        return hal_nrf_read_reg(CD) & 1;
 608   1      }
 609          
 610          void hal_nrf_activate_features(void)
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 11  

 611          {return;}
 612          
 613          void hal_nrf_setup_dynamic_payload (uint8_t setup)
 614          {
 615   1        en_pipes_t dynpd;
 616   1        dynpd.value = setup & ~0xC0;
 617   1      
 618   1        hal_nrf_write_reg (DYNPD, dynpd.value);
 619   1      }
 620          
 621          void hal_nrf_enable_dynamic_payload(bool enable)
 622          {
 623   1        feature_t feature;
 624   1        feature.value = hal_nrf_read_reg (FEATURE);
 625   1        feature.bits.en_dpl = (enable) ? 1 : 0;
 626   1      
 627   1        hal_nrf_write_reg (FEATURE, feature.value);
 628   1      }
 629          
 630          void hal_nrf_enable_ack_payload(bool enable)
 631          {
 632   1        feature_t feature;
 633   1        feature.value = hal_nrf_read_reg (FEATURE);
 634   1        feature.bits.en_ack_pay = (enable) ? 1 : 0;
 635   1      
 636   1        hal_nrf_write_reg (FEATURE, feature.value);
 637   1      }
 638          
 639          void hal_nrf_enable_dynamic_ack(bool enable)
 640          {
 641   1        feature_t feature;
 642   1        feature.value = hal_nrf_read_reg (FEATURE);
 643   1        feature.bits.en_dyn_ack = (enable) ? 1 : 0;
 644   1      
 645   1        hal_nrf_write_reg (FEATURE, feature.value);
 646   1      }
 647          
 648          void hal_nrf_write_tx_payload(const uint8_t data *tx_pload, uint8_t data length)
 649          {
 650   1        hal_nrf_write_multibyte_reg(W_TX_PAYLOAD, tx_pload, length);
 651   1      }
 652          
 653          void hal_nrf_write_tx_payload_noack(const uint8_t data *tx_pload, uint8_t data length)
 654          {
 655   1        hal_nrf_write_multibyte_reg(W_TX_PAYLOAD_NOACK, tx_pload, length);
 656   1      }
 657          
 658          void hal_nrf_write_ack_payload(uint8_t pipe, const uint8_t *tx_pload, uint8_t data length)
 659          {
 660   1        hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
 661   1      }
 662          
 663          uint8_t hal_nrf_read_rx_payload_width()
 664          {
 665   1        return hal_nrf_read_reg(R_RX_PL_WID);
 666   1      }
 667          
 668          uint16_t hal_nrf_read_rx_payload(uint8_t data *rx_pload)
 669          {
 670   1        return hal_nrf_read_multibyte_reg(UINT8(HAL_NRF_RX_PLOAD), rx_pload);
 671   1      }
 672          
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 12  

 673          uint8_t hal_nrf_get_rx_data_source(void)
 674          {
 675   1        return ((hal_nrf_nop() & (BIT_3|BIT_2|BIT_1)) >> 1);
 676   1      }
 677          
 678          void hal_nrf_reuse_tx(void)
 679          {
 680   1        CSN_LOW();
 681   1        hal_nrf_rw(REUSE_TX_PL);
 682   1        CSN_HIGH();
 683   1      }
 684          
 685          bool hal_nrf_get_reuse_tx_status(void)
 686          {
 687   1        return (bool)((hal_nrf_get_fifo_status() & (1<<TX_REUSE)) >> TX_REUSE);
 688   1      }
 689          
 690          void hal_nrf_flush_rx(void)
 691          {
 692   1        CSN_LOW();
 693   1        hal_nrf_rw(FLUSH_RX);
 694   1        CSN_HIGH();
 695   1      }
 696          
 697          void hal_nrf_flush_tx(void)
 698          {
 699   1        CSN_LOW();
 700   1        hal_nrf_rw(FLUSH_TX);
 701   1        CSN_HIGH();
 702   1      }
 703          
 704          uint8_t hal_nrf_nop(void)
 705          {
 706   1        uint8_t retval;
 707   1      
 708   1        CSN_LOW();
 709   1        retval = hal_nrf_rw(NOP);
 710   1        CSN_HIGH();
 711   1      
 712   1        return retval;
 713   1      }
 714          
 715          void hal_nrf_set_pll_mode(bool pll_lock)
 716          {
 717   1        rf_setup_t rf_setup;
 718   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 719   1        rf_setup.bits.pll_lock = (pll_lock) ? 1 : 0;
 720   1      
 721   1        hal_nrf_write_reg(RF_SETUP, rf_setup.value);
 722   1      }
 723          
 724          void hal_nrf_enable_continious_wave (bool enable)
 725          {
 726   1        rf_setup_t rf_setup;
 727   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 728   1        rf_setup.bits.cont_wave = (enable ? 1 : 0);
 729   1      
 730   1        hal_nrf_write_reg(RF_SETUP, rf_setup.value);
 731   1      }
 732          
 733          static uint8_t hal_nrf_read_reg(uint8_t data reg)
 734          {
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 13  

 735   1        uint8_t temp;
 736   1      
 737   1        CSN_LOW();
 738   1        hal_nrf_rw(reg);
 739   1        temp = hal_nrf_rw(0);
 740   1        CSN_HIGH();
 741   1      
 742   1        return temp;
 743   1      }
 744          
 745          uint8_t hal_nrf_write_reg(uint8_t data reg, uint8_t data value)
 746          {
 747   1        uint8_t data retval;
 748   1        
 749   1        CSN_LOW();
 750   1        // retval = hal_nrf_rw(W_REGISTER + reg);
 751   1      
 752   1        RFDAT = W_REGISTER + reg;
*** ERROR C202 IN LINE 752 OF ..\..\..\HAL\NRF24L01P\HAL_NRF.C: 'RFDAT': undefined identifier
 753   1        RFSPIF = 0;     // ! IMPORTANT ! Clear RF SPI ready flag
 754   1                        // after data written to RFDAT..
 755   1        while(!RFSPIF); // wait for byte transfer finished
 756   1          
 757   1        retval = RFDAT;   // return SPI read value
*** ERROR C202 IN LINE 757 OF ..\..\..\HAL\NRF24L01P\HAL_NRF.C: 'RFDAT': undefined identifier
 758   1      
 759   1      
 760   1        RFDAT = value;
*** ERROR C202 IN LINE 760 OF ..\..\..\HAL\NRF24L01P\HAL_NRF.C: 'RFDAT': undefined identifier
 761   1        RFSPIF = 0;     // ! IMPORTANT ! Clear RF SPI ready flag
 762   1                        // after data written to RFDAT..
 763   1        while(!RFSPIF); // wait for byte transfer finished
 764   1          
 765   1        // retval = RFDAT;   // return SPI read value
 766   1      
 767   1       //  hal_nrf_rw(value);
 768   1        CSN_HIGH();
 769   1      
 770   1        return retval;
 771   1      }
 772          
 773          uint16_t hal_nrf_read_multibyte_reg(uint8_t data reg, uint8_t data *pbuf)
 774          {
 775   1        uint8_t data ctr, length;
 776   1        switch(reg)
 777   1        {
 778   2          case HAL_NRF_PIPE0:
 779   2          case HAL_NRF_PIPE1:
 780   2          case HAL_NRF_TX:
 781   2            length = ctr = hal_nrf_get_address_width();
 782   2            CSN_LOW();
 783   2            hal_nrf_rw(RX_ADDR_P0 + reg);
 784   2            break;
 785   2            
 786   2          case HAL_NRF_RX_PLOAD:
 787   2            if( (reg = hal_nrf_get_rx_data_source()) < 7)
 788   2            {
 789   3              length = ctr = hal_nrf_read_rx_payload_width();
 790   3              CSN_LOW();
 791   3              hal_nrf_rw(R_RX_PAYLOAD);
 792   3            }
 793   2            else
C51 COMPILER V9.02   HAL_NRF                                                               04/06/2011 12:27:57 PAGE 14  

 794   2            {
 795   3              ctr = length = 0;
 796   3            }
 797   2            break;
 798   2      
 799   2          default:
 800   2            ctr = length = 0;
 801   2            break;
 802   2        }
 803   1      
 804   1        while(ctr--)
 805   1        {
 806   2          *pbuf++ = hal_nrf_rw(0);
 807   2        }
 808   1      
 809   1        CSN_HIGH();
 810   1      
 811   1        return (((uint16_t) reg << 8) | length);
 812   1      }
 813          
 814          static void hal_nrf_write_multibyte_reg( uint8_t data cmd, const uint8_t data *pbuf, uint8_t data length)
 815          {
 816   1        data uint8_t dummy;
 817   1        P0_4 = 1;
 818   1        CSN_LOW();
 819   1      
 820   1        HAL_NRF_HW_SPI_WRITE(cmd);
 821   1      
 822   1        for(; length > 0; --length, ++pbuf)
 823   1       {
 824   2         // next = *(pbuf + i);
 825   2          while(HAL_NRF_HW_SPI_BUSY);  // wait for byte transfer finished
 826   2          ;
 827   2          dummy = HAL_NRF_HW_SPI_READ();
 828   2          HAL_NRF_HW_SPI_WRITE(*pbuf);    
 829   2        }
 830   1       
 831   1        while(HAL_NRF_HW_SPI_BUSY);  // wait for byte transfer finished
 832   1        ;
 833   1        dummy = HAL_NRF_HW_SPI_READ();
 834   1        CSN_HIGH();
 835   1         P0_4 = 0;
 836   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  3 ERROR(S)
