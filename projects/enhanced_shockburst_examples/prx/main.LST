C51 COMPILER V8.12   MAIN                                                                  02/01/2011 01:08:29 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE INCDIR(..\..\..\hal\nrf24lu1p;..\..\..\hal\nrf24l01p;..\..\..
                    -\hal;..\..\..\compiler\c51) DEFINE(MCU_NRF24LU1P) DEBUG OBJECTEXTEND

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5717 $
  12           */
  13          
  14          /** @file
  15           * @brief Enhanced ShockBurst Primary Receiver example
  16           * @defgroup esb_prx_example Enhanced ShockBurst Primary Receiver (PRX) example
  17           * @{
  18           * @ingroup nrf_examples
  19           * 
  20           * @brief This example monitors for data and writes the first byte (byte 0) of the
  21           * received payloads to P0. 
  22           *
  23           * The example shows the minimum required setup for receiving packets from a 
  24           * primary transmitter (PTX) device.  
  25           * 
  26           * The following default radio parameters are being used:
  27           * - RF channel 2
  28           * - 2 Mbps data rate
  29           * - RX address 0xE7E7E7E7E7 (pipe 0) and 0xC2C2C2C2C2 (pipe 1)
  30           * - 1 byte CRC  
  31           * 
  32           * The project @ref esb_ptx_example can be used as a counterpart for transmitting the data.
  33           * 
  34          */
  35          
  36          #ifdef MCU_NRF24LE1
              #include <Nordic\reg24le1.h>
              #endif
  39          
  40          #ifdef MCU_NRF24LU1P
  41          #include <Nordic\reg24lu1.h>
  42          #endif
  43          
  44          #include <stdint.h>
  45          #include "hal_nrf.h"
  46          #include "hal_nrf_hw.h"
  47          
  48          // Global variables
  49          uint8_t payload[3];
  50          
  51          void main()
  52          {
  53   1        #ifdef MCU_NRF24LU1P
  54   1        // Enable radio SPI
C51 COMPILER V8.12   MAIN                                                                  02/01/2011 01:08:29 PAGE 2   

  55   1        RFCTL = 0x10; 
  56   1        #endif
  57   1      
  58   1        // Set P0 as output
  59   1        P0DIR = 0;
  60   1        
  61   1        // Enable the radio clock
  62   1        RFCKEN = 1;
  63   1      
  64   1        // Enable RF interrupt
  65   1        RF = 1;  
  66   1        // Enable global interrupt
  67   1        EA = 1;
  68   1      
  69   1        // Configure radio as primary receiver (PTX) 
  70   1        hal_nrf_set_operation_mode(HAL_NRF_PRX);
  71   1      
  72   1        // Set payload width to 3 bytes
  73   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, 3);
  74   1      
  75   1        // Power up radio
  76   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
  77   1      
  78   1        // Enable receiver 
  79   1        CE_HIGH();
  80   1      
  81   1        while(1)
  82   1        {
  83   2        }                                           
  84   1      } 
  85          
  86          // Rado interrupt 
  87          void rf_irq() interrupt INTERRUPT_RFIRQ
  88          {
  89   1        uint8_t irq_flags;
  90   1         
  91   1        // Read and clear IRQ flags from radio
  92   1        irq_flags = hal_nrf_get_clear_irq_flags(); 
  93   1        
  94   1        // If data received
  95   1        if(irq_flags & (1<<HAL_NRF_RX_DR))
  96   1        {
  97   2          // Read payload
  98   2          while(!hal_nrf_rx_fifo_empty())
  99   2          {
 100   3            hal_nrf_read_rx_payload(payload);
 101   3          }
 102   2      
 103   2          // Write received payload[0] to port 0
 104   2          P0 = payload[0];
 105   2        }
 106   1      }      


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    115    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V8.12   MAIN                                                                  02/01/2011 01:08:29 PAGE 3   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
