C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE USB_DESC_BULK
OBJECT MODULE PLACED IN usb_desc_bulk.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE usb_desc_bulk.c LARGE BROWSE INCDIR(..\usb_rx;..\..\compiler\c51;..\..\hal\
                    -nrf24lu1p;..\..\hal\nrf24l01p) DEFINE(MCU_NRF24LU1P) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PREPRINT

line level    source

   1                                                                                                  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5718 $
  12           */
  13          
  14          /** @file
  15           * USB descriptor for Bootloader
  16           *
  17           */
  18          #include "config.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 5718 $
  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1   * Configuration file for bootloader
  16      =1   *
  17      =1   */
  18      =1  #ifndef CONFIG_H__
  19      =1  #define CONFIG_H__
  20      =1  
  21      =1  #define FLASH_PAGE_SIZE     512U
  22      =1  #define MAX_PACKET_SIZE_EP0 32
  23      =1  #define USB_EP1_SIZE        64
  24      =1  #define FLASH_SIZE          (32U*1024U)
  25      =1  #define NUM_FLASH_PAGES     FLASH_SIZE/FLASH_PAGE_SIZE
  26      =1  
  27      =1  #endif // CONFIG_H__
  19          
  20          /*
  21          // Place all code and constants in this file in the segment "BOOTLOADER":
  22          #pragma userclass (code = BOOTLOADER)
  23          #pragma userclass (const = BOOTLOADER)
  24            */
  25          
  26          /** Swaps the upper byte with the lower byte in a 16 bit variable */
  27          #define SWAP(x) ((((x)&0xFF)<<8)|(((x)>>8)&0xFF))
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 2   

  28          
  29          #include "usb_desc_bulk.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 5718 $
  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1   * Header file for the Bootloader USB descriptor
  16      =1   *
  17      =1   */
  18      =1  #ifndef USB_DESC_BULK_H__
  19      =1  #define USB_DESC_BULK_H__
  20      =1  
  21      =1  #include "hal_usb_desc.h"
   1      =2  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is confidential property of Nordic 
   4      =2   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =2   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *              
  11      =2   * $LastChangedRevision: 5717 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2  * @brief This file contain structures and constants defined in Chapter 9 of the USB 2.0 standard
  16      =2   */
  17      =2  
  18      =2  #ifndef HAL_USB_DESC_H__
  19      =2  #define HAL_USB_DESC_H__
  20      =2  
  21      =2  #include <stdint.h>
   1      =3  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =3   * Terms and conditions of usage are described in detail in NORDIC
   5      =3   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *
  11      =3   * $LastChangedRevision: 4726 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3   * Type definitions for firmware projects developed at Nordic semiconductor.
  16      =3   *
  17      =3   * Standard storage classes in C, such as @c char, @c int, and @c long, ar not always
  18      =3   * interpreted in the same way by the compiler. The types here are defined by their
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 3   

  19      =3   * bit length and signed/unsigned property, as their name indicate. The correlation
  20      =3   * between the name and properties of the storage class should be true, regardless of
  21      =3   * the compiler being used.
  22      =3   */
  23      =3  
  24      =3  #ifndef __STDINT_H__
  25      =3  #define __STDINT_H__
  26      =3  
  27      =3  #ifdef __C51__
  28      =3  
  29      =3  typedef unsigned char uint8_t;        ///< 8 bit unsigned int
  30      =3  
  31      =3  typedef signed char int8_t;          ///< 8 bit signed int
  32      =3  
  33      =3  typedef unsigned int uint16_t;        ///< 16 bit unsigned int
  34      =3  
  35      =3  typedef signed int int16_t;          ///< 16 bit signed int
  36      =3  
  37      =3  typedef unsigned long uint32_t;       ///< 32 bit unsigned int
  38      =3  
  39      =3  typedef signed long int32_t;         ///< 32 bit signed int
  40      =3  
  41      =3  #endif // __C51__
  42      =3  
  43      =3  #ifndef NULL
  44      =3  #define NULL (void*)0
  45      =3  #endif
  46      =3  
  47      =3  #endif // __STDINT_H__
  22      =2  
  23      =2  // Standard request codes
  24      =2  #define USB_REQ_GET_STATUS         0x00
  25      =2  #define USB_REQ_CLEAR_FEATURE      0x01
  26      =2  #define USB_REQ_RESERVED_1         0x02
  27      =2  #define USB_REQ_SET_FEATURE        0x03
  28      =2  #define USB_REQ_RESERVED_2         0x04
  29      =2  #define USB_REQ_SET_ADDRESS        0x05
  30      =2  #define USB_REQ_GET_DESCRIPTOR     0x06
  31      =2  #define USB_REQ_SET_DESCRIPTOR     0x07
  32      =2  #define USB_REQ_GET_CONFIGURATION  0x08
  33      =2  #define USB_REQ_SET_CONFIGURATION  0x09
  34      =2  #define USB_REQ_GET_INTERFACE      0x0a
  35      =2  #define USB_REQ_SET_INTERFACE      0x0b
  36      =2  #define USB_REQ_SYNCH_FRAME        0x0c
  37      =2  
  38      =2  // Descriptor types
  39      =2  #define USB_DESC_DEVICE           0x01
  40      =2  #define USB_DESC_CONFIGURATION    0x02
  41      =2  #define USB_DESC_STRING           0x03
  42      =2  #define USB_DESC_INTERFACE        0x04
  43      =2  #define USB_DESC_ENDPOINT         0x05
  44      =2  #define USB_DESC_DEVICE_QUAL      0x06
  45      =2  #define USB_DESC_OTHER_SPEED_CONF 0x07
  46      =2  #define USB_DESC_INTERFACE_POWER  0x08
  47      =2  #define USB_DESC_OTG              0x09
  48      =2  #define USB_DESC_DEBUG            0x0A
  49      =2  #define USB_DESC_INTERFACE_ASSOC  0x0B
  50      =2  
  51      =2  #define USB_ENDPOINT_TYPE_CONTROL           0x00
  52      =2  #define USB_ENDPOINT_TYPE_ISOCHRONOUS       0x01
  53      =2  #define USB_ENDPOINT_TYPE_BULK              0x02
  54      =2  #define USB_ENDPOINT_TYPE_INTERRUPT         0x03
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 4   

  55      =2  
  56      =2  // USB device classes
  57      =2  #define USB_DEVICE_CLASS_RESERVED               0x00
  58      =2  #define USB_DEVICE_CLASS_AUDIO                  0x01
  59      =2  #define USB_DEVICE_CLASS_COMMUNICATIONS         0x02
  60      =2  #define USB_DEVICE_CLASS_HUMAN_INTERFACE        0x03
  61      =2  #define USB_DEVICE_CLASS_MONITOR                0x04
  62      =2  #define USB_DEVICE_CLASS_PHYSICAL_INTERFACE     0x05
  63      =2  #define USB_DEVICE_CLASS_POWER                  0x06
  64      =2  #define USB_DEVICE_CLASS_PRINTER                0x07
  65      =2  #define USB_DEVICE_CLASS_STORAGE                0x08
  66      =2  #define USB_DEVICE_CLASS_HUB                    0x09
  67      =2  #define USB_DEVICE_CLASS_APPLICATION_SPECIFIC   0xFE
  68      =2  #define USB_DEVICE_CLASS_VENDOR_SPECIFIC        0xFF
  69      =2  
  70      =2  
  71      =2  #define USB_CLASS_DESCRIPTOR_HID    0x21
  72      =2  #define USB_CLASS_DESCRIPTOR_REPORT 0x22
  73      =2  #define USB_CLASS_DESCRIPTOR_PHYSICAL_DESCRIPTOR 0x23
  74      =2  
  75      =2  #define USB_DEVICE_REMOTE_WAKEUP    0x01
  76      =2  #define USB_ENDPOINT_HALT           0x00
  77      =2  #define USB_TEST_MODE               0x02
  78      =2  
  79      =2  typedef struct {
  80      =2       volatile uint8_t bLength;
  81      =2       volatile uint8_t bDescriptorType;
  82      =2       volatile uint16_t bcdUSB;
  83      =2       volatile uint8_t bDeviceClass;
  84      =2       volatile uint8_t bDeviceSubClass;
  85      =2       volatile uint8_t bDeviceProtocol;
  86      =2       volatile uint8_t bMaxPacketSize0;
  87      =2       volatile uint16_t idVendor;
  88      =2       volatile uint16_t idProduct;
  89      =2       volatile uint16_t bcdDevice;
  90      =2       volatile uint8_t iManufacturer;
  91      =2       volatile uint8_t iProduct;
  92      =2       volatile uint8_t iSerialNumber;
  93      =2       volatile uint8_t bNumConfigurations;
  94      =2  } hal_usb_dev_desc_t;
  95      =2  
  96      =2  typedef struct {
  97      =2       volatile uint8_t bLength;
  98      =2       volatile uint8_t bDescriptorType;
  99      =2       volatile uint16_t wTotalLength;
 100      =2       volatile uint8_t bNumInterfaces;
 101      =2       volatile uint8_t bConfigurationValue;
 102      =2       volatile uint8_t iConfiguration;
 103      =2       volatile uint8_t bmAttributes;
 104      =2       volatile uint8_t bMaxPower;
 105      =2  } hal_usb_conf_desc_t;
 106      =2  
 107      =2  typedef struct {
 108      =2       volatile uint8_t bLength;
 109      =2       volatile uint8_t bDescriptorType;
 110      =2       volatile uint8_t bInterfaceNumber;
 111      =2       volatile uint8_t bAlternateSetting;
 112      =2       volatile uint8_t bNumEndpoints;
 113      =2       volatile uint8_t bInterfaceClass;
 114      =2       volatile uint8_t bInterfaceSubClass;
 115      =2       volatile uint8_t bInterfaceProtocol;
 116      =2       volatile uint8_t iInterface;
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 5   

 117      =2  } hal_usb_if_desc_t;
 118      =2  
 119      =2  typedef struct {
 120      =2       volatile uint8_t bLength;
 121      =2       volatile uint8_t bDescriptorType;
 122      =2       volatile uint8_t bEndpointAddress;
 123      =2       volatile uint8_t bmAttributes;
 124      =2       volatile uint16_t wMaxPacketSize;
 125      =2       volatile uint8_t bInterval;
 126      =2  } hal_usb_ep_desc_t;
 127      =2  
 128      =2  /*
 129      =2  typedef struct {
 130      =2      volatile uint8_t bLength;
 131      =2      volatile uint8_t bDescriptorType;
 132      =2      volatile uint16_t bcdHID;
 133      =2      volatile uint8_t bCountryCode;
 134      =2      volatile uint8_t bNumDescriptors;
 135      =2      volatile uint8_t bDescriptorType2;
 136      =2      volatile uint16_t wDescriptorLength;
 137      =2  } hal_usb_hid_desc_t;
 138      =2  
 139      =2  
 140      =2  typedef struct {
 141      =2       volatile uint8_t* desc;
 142      =2  } hal_usb_string_desc_t;
 143      =2  
 144      =2  typedef struct {
 145      =2       volatile uint8_t bLength;
 146      =2       volatile uint8_t bDescriptorType;
 147      =2  } hal_usb_common_desc_t;
 148      =2    */
 149      =2  
 150      =2  #endif // HAL_USB_DESC_H__
  22      =1  
  23      =1  #define USB_DESC_TEMPLATE 
  24      =1  
  25      =1  //------------------------------------------ 
  26      =1  // Vendor ID and Product ID definitions 
  27      =1  //------------------------------------------ 
  28      =1  #define VID   0x1915 
  29      =1  #define PID   0x0909 
  30      =1  
  31      =1  #define USB_STRING_DESC_COUNT 2
  32      =1  
  33      =1  typedef struct
  34      =1  {
  35      =1      hal_usb_conf_desc_t conf;
  36      =1      hal_usb_if_desc_t if0;
  37      =1      hal_usb_ep_desc_t ep1in;
  38      =1      hal_usb_ep_desc_t ep1out;
  39      =1  } usb_conf_desc_templ_t;
  40      =1  
  41      =1  typedef struct { 
  42      =1       volatile uint8_t* idx[USB_STRING_DESC_COUNT]; 
  43      =1  } usb_string_desc_templ_t; 
  44      =1  
  45      =1  extern code usb_string_desc_templ_t g_usb_string_desc; 
  46      =1  extern code usb_conf_desc_templ_t g_usb_conf_desc;
  47      =1  extern code hal_usb_dev_desc_t g_usb_dev_desc;
  48      =1  
  49      =1  typedef struct { 
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 6   

  50      =1       hal_usb_dev_desc_t* dev; 
  51      =1       usb_conf_desc_templ_t* conf; 
  52      =1       usb_string_desc_templ_t* string; 
  53      =1       uint8_t string_zero[4]; 
  54      =1  } usb_descs_templ_t;
  55      =1  
  56      =1  extern code uint8_t g_usb_string_desc_1[];
  57      =1  extern code uint8_t g_usb_string_desc_2[];
  58      =1  extern code uint8_t string_zero[4];
  59      =1  
  60      =1  #endif  // USB_DESC_TEMPL_H__
  30          
  31          code hal_usb_dev_desc_t g_usb_dev_desc = {
  32            sizeof(hal_usb_dev_desc_t), 
  33            USB_DESC_DEVICE, 
  34            SWAP(0x0200),       // bcdUSB
  35            0xff,               // bDeviceClass
  36            0xff,               // bDeviceSubclass
  37            0xff,               // bDeviceProtocol
  38            MAX_PACKET_SIZE_EP0,// bMaxPAcketSize0
  39            SWAP(6421),         // idVendor - 6421 (0x1915) : Nordic Semiconductor ASA
  40            SWAP(0x0909),       // idProduct
  41            SWAP(0x0001),       // bcdDevice - Device Release Number (BCD)
  42            0x01,               // iManufacturer
  43            0x02,               // iProduct
  44            0x00,               // iSerialNumber
  45            0x01                // bNumConfigurations
  46          };
  47          
  48          code usb_conf_desc_templ_t g_usb_conf_desc = 
  49          {
  50              {
  51                  sizeof(hal_usb_conf_desc_t),
  52                  USB_DESC_CONFIGURATION,
  53                  SWAP(sizeof(usb_conf_desc_templ_t)),
  54                  1,            // bNumInterfaces
  55                  1,            // bConfigurationValue
  56                  2,            // iConfiguration
  57                  0xE0,         // bmAttributes - D6: self-powered, bus powered: 0xA0
  58                  50,           // bMaxPower
  59              },
  60              /* Interface Descriptor 0 */ 
  61              {
  62                  sizeof(hal_usb_if_desc_t),
  63                  USB_DESC_INTERFACE,
  64                  0,            // bInterfaceNumber
  65                  0,            // bAlternateSetting
  66                  2,            // bNumEndpoints
  67                  0xff,         // bInterfaceClass
  68                  0x00,         // bInterfaceSubClass  
  69                  0xff,         // bInterfaceProtocol 
  70                  0x00,         // iInterface
  71              },
  72               /* Endpoint Descriptor EP1IN */
  73               {
  74                  sizeof(hal_usb_ep_desc_t),
  75                  USB_DESC_ENDPOINT,
  76                  0x82,                   // bEndpointAddress
  77                  USB_ENDPOINT_TYPE_BULK, // bmAttributes
  78                  SWAP(USB_EP1_SIZE),     // wMaxPacketSize
  79                  0x06                    // bInterval
  80               },
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 7   

  81               /* Endpoint Descriptor EP1OUT */
  82               {
  83                  sizeof(hal_usb_ep_desc_t),
  84                  USB_DESC_ENDPOINT,
  85                  0x02,                   // bEndpointAddress
  86                  USB_ENDPOINT_TYPE_BULK, // bmAttributes
  87                  SWAP(USB_EP1_SIZE),     // wMaxPacketSize
  88                  0x06                    // bInterval
  89              },
  90          };
  91          
  92          #define USB_STRING_IDX_1_DESC "Nordic Semiconductor"
  93          
  94          code uint8_t g_usb_string_desc_1[] = 
  95          {
  96              sizeof(USB_STRING_IDX_1_DESC) * 2, 0x03,
  97              'N', 00,
  98              'o', 00,
  99              'r', 00,
 100              'd', 00,
 101              'i', 00,
 102              'c', 00,
 103              ' ', 00,
 104              'S', 00,
 105              'e', 00,
 106              'm', 00,
 107              'i', 00,
 108              'c', 00,
 109              'o', 00,
 110              'n', 00,
 111              'd', 00,
 112              'u', 00,
 113              'c', 00,
 114              't', 00,
 115              'o', 00,
 116              'r', 00 
 117          };
 118          
 119          #define USB_STRING_IDX_2_DESC "CID Wifi Headstage RX "
 120          
 121          code uint8_t g_usb_string_desc_2[] = 
 122          {
 123              sizeof(USB_STRING_IDX_2_DESC) * 2, 0x03,
 124              'C', 00,
 125              'I', 00,
 126              'D', 00,
 127              ' ', 00,
 128              'W', 00,
 129              'i', 00,
 130              'f', 00,
 131              'i', 00,
 132              ' ', 00,
 133              'H', 00,
 134              'e', 00,
 135              'a', 00,
 136              'd', 00,
 137              's', 00,
 138              't', 00,
 139              'a', 00,
 140              'g', 00,
 141              'e', 00,
 142              ' ', 00,
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 8   

 143              'R', 00,
 144              'X', 00,
 145              ' ', 00
 146          };
 147          
 148          code usb_string_desc_templ_t g_usb_string_desc = {   
 149              g_usb_string_desc_1,   
 150              g_usb_string_desc_2,   
 151          };
 152          
 153          // This is for setting language American English (String descriptor 0 is an array of supported languages):
 154          code uint8_t string_zero[] = {0x04, 0x03, 0x09, 0x04} ;
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 10  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
g_usb_string_desc. . . . . . . . . . .  PUBLIC   CODE   STRUCT   008AH  6
usb_descs_templ_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  dev. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  conf . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  string . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  string_zero. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0009H  4
g_usb_conf_desc. . . . . . . . . . . .  PUBLIC   CODE   STRUCT   0012H  32
g_usb_string_desc_1. . . . . . . . . .  PUBLIC   CODE   ARRAY    0032H  42
g_usb_string_desc_2. . . . . . . . . .  PUBLIC   CODE   ARRAY    005CH  46
usb_string_desc_templ_t. . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  6
usb_conf_desc_templ_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  32
  conf . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  9
  if0. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0009H  9
  ep1in. . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0012H  7
  ep1out . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0019H  7
g_usb_dev_desc . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   0000H  18
string_zero. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0090H  4
hal_usb_conf_desc_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wTotalLength . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  bNumInterfaces . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bConfigurationValue. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  iConfiguration . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bMaxPower. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
hal_usb_dev_desc_t . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  18
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bcdUSB . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  bDeviceClass . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bDeviceSubClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bDeviceProtocol. . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bMaxPacketSize0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  idVendor . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  idProduct. . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bcdDevice. . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  iManufacturer. . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  iProduct . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  iSerialNumber. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  bNumConfigurations . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
hal_usb_if_desc_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bInterfaceNumber . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bAlternateSetting. . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  bNumEndpoints. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bInterfaceClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bInterfaceSubClass . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bInterfaceProtocol . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  iInterface . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
C51 COMPILER V9.02   USB_DESC_BULK                                                         05/15/2011 19:16:12 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


hal_usb_ep_desc_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bEndpointAddress . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  wMaxPacketSize . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  bInterval. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    148    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
