C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE CKLF
OBJECT MODULE PLACED IN .\cklf.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\hal\nrf24lu1p\cklf.c LARGE BROWSE INCDIR(..\usb_rx;..\..\compiler\c51
                    -;..\..\hal\nrf24lu1p;..\..\hal\nrf24l01p) DEFINE(MCU_NRF24LU1P) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\cklf
                    -.lst) PREPRINT(.\cklf.i) OBJECT(.\cklf.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 5717 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of the cklf module for nRF24LU1+
  16           */
  17          
  18          #include <Nordic\reg24lu1.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1   * reg24lu1.h
   3      =1   *
   4      =1   * Keil C51 header file for the Nordic Semiconductor nRF24LU1 2.4GHz RF
   5      =1   * transceiver with embedded 8051 compatible microcontroller and USB.
   6      =1   *
   7      =1   *
   8      =1   *------------------------------------------------------------------------*/
   9      =1  #ifndef __REG24LU1_H__
  10      =1  #define __REG24LU1_H__
  11      =1  
  12      =1  //-----------------------------------------------------------------------------
  13      =1  // Byte Registers
  14      =1  //-----------------------------------------------------------------------------
  15      =1  
  16      =1  sfr   P0           = 0x80;
  17      =1  sfr   SP           = 0x81;
  18      =1  sfr   DPL          = 0x82;
  19      =1  sfr   DPH          = 0x83;
  20      =1  sfr   DPL1         = 0x84;
  21      =1  sfr   DPH1         = 0x85;
  22      =1  sfr   PCON         = 0x87;
  23      =1  sfr   TCON         = 0x88;
  24      =1  sfr   TMOD         = 0x89;
  25      =1  sfr   TL0          = 0x8A;
  26      =1  sfr   TL1          = 0x8B;
  27      =1  sfr   TH0          = 0x8C;
  28      =1  sfr   TH1          = 0x8D;
  29      =1  sfr   CKCON        = 0x8E;
  30      =1  sfr   RFCON        = 0x90;
  31      =1  sfr   DPS          = 0x92;
  32      =1  sfr   P0DIR        = 0x94;
  33      =1  sfr   P0ALT        = 0x95;
  34      =1  sfr   S0CON        = 0x98;
  35      =1  sfr   S0BUF        = 0x99;
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 2   

  36      =1  sfr   IEN2         = 0x9A;
  37      =1  sfr   USBCON       = 0xA0;
  38      =1  sfr   CLKCTL       = 0xA3;
  39      =1  sfr   PWRDWN       = 0xA4;
  40      =1  sfr   WUCONF       = 0xA5;
  41      =1  sfr   INTEXP       = 0xA6;
  42      =1  sfr   IEN0         = 0xA8;
  43      =1  sfr   IP0          = 0xA9;
  44      =1  sfr   S0RELL       = 0xAA;
  45      =1  sfr   REGXH        = 0xAB;
  46      =1  sfr   REGXL        = 0xAC;
  47      =1  sfr   REGXC        = 0xAD;
  48      =1  sfr   RSTRES       = 0xB1;
  49      =1  sfr   SMDAT        = 0xB2;
  50      =1  sfr   SMCTL        = 0xB3;
  51      =1  sfr   TICKDV       = 0xB5;
  52      =1  sfr   IEN1         = 0xB8;
  53      =1  sfr   IP1          = 0xB9;
  54      =1  sfr   S0RELH       = 0xBA;
  55      =1  sfr   SSCONF       = 0xBC;
  56      =1  sfr   SSDATA       = 0xBD;
  57      =1  sfr   SSSTAT       = 0xBE;
  58      =1  sfr   IRCON        = 0xC0;
  59      =1  sfr   CCEN         = 0xC1;
  60      =1  sfr   CCL1         = 0xC2;
  61      =1  sfr   CCH1         = 0xC3;
  62      =1  sfr   CCL2         = 0xC4;
  63      =1  sfr   CCH2         = 0xC5;
  64      =1  sfr   CCL3         = 0xC6;
  65      =1  sfr   CCH3         = 0xC7;
  66      =1  sfr   T2CON        = 0xC8;
  67      =1  sfr   P0EXP        = 0xC9;
  68      =1  sfr   CRCL         = 0xCA;
  69      =1  sfr   CRCH         = 0xCB;
  70      =1  sfr   TL2          = 0xCC;
  71      =1  sfr   TH2          = 0xCD;
  72      =1  sfr   PSW          = 0xD0;
  73      =1  sfr   WDCON        = 0xD8;
  74      =1  sfr   USBSLP       = 0xD9;
  75      =1  sfr   ACC          = 0xE0;
  76      =1  sfr   RFDAT        = 0xE5;
  77      =1  sfr   RFCTL        = 0xE6;
  78      =1  sfr   AESCS        = 0xE8;
  79      =1  sfr   MD0          = 0xE9;
  80      =1  sfr   MD1          = 0xEA;
  81      =1  sfr   MD2          = 0xEB;
  82      =1  sfr   MD3          = 0xEC;
  83      =1  sfr   MD4          = 0xED;
  84      =1  sfr   MD5          = 0xEE;
  85      =1  sfr   ARCON        = 0xEF;
  86      =1  sfr   B            = 0xF0;
  87      =1  sfr   AESKIN       = 0xF1;
  88      =1  sfr   AESIV        = 0xF2;
  89      =1  sfr   AESD         = 0xF3;
  90      =1  sfr   AESIA1       = 0xF5;
  91      =1  sfr   AESIA2       = 0xF6;
  92      =1  sfr   FSR          = 0xF8;
  93      =1  sfr   FPCR         = 0xF9;
  94      =1  sfr   FCR          = 0xFA;
  95      =1  
  96      =1  //-----------------------------------------------------------------------------
  97      =1  // Word Registers
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 3   

  98      =1  //-----------------------------------------------------------------------------
  99      =1  
 100      =1  sfr16 CC1          = 0xC2;
 101      =1  sfr16 CC2          = 0xC4;
 102      =1  sfr16 CC3          = 0xC6;
 103      =1  sfr16 CRC          = 0xCA;
 104      =1  sfr16 T2           = 0xCC;
 105      =1  
 106      =1  //-----------------------------------------------------------------------------
 107      =1  /* Lint uses a trick (see co-kc51.lnt) where sbit gets treated like (expanded to) a bool.
 108      =1     This causes errors due to the strong type checking of _Bool (and thereby bool) that
 109      =1     is turned on in our implementation of stdbool.h.
 110      =1     Therefore, we suppress Lint warning 18 ("Redeclaration") for the sbit-s declared in this file.
 111      =1  */
 112      =1  
 113      =1  /*lint -e18 */
 114      =1  //-----------------------------------------------------------------------------
 115      =1  
 116      =1  //-----------------------------------------------------------------------------
 117      =1  // Bit Definitions
 118      =1  //-----------------------------------------------------------------------------
 119      =1  
 120      =1  /*  FSR  */
 121      =1  sbit  MCDIS        = FSR^7;
 122      =1  sbit  STP          = FSR^6;
 123      =1  sbit  WEN          = FSR^5;
 124      =1  sbit  RDYN         = FSR^4;
 125      =1  sbit  INFEN        = FSR^3;
 126      =1  sbit  RDIS         = FSR^2;
 127      =1  sbit  RDEND        = FSR^1;
 128      =1  sbit  WPEN         = FSR^0;
 129      =1  
 130      =1  /*  PSW   */
 131      =1  sbit  CY           = PSW^7;
 132      =1  sbit  AC           = PSW^6;
 133      =1  sbit  F0           = PSW^5;
 134      =1  sbit  RS1          = PSW^4;
 135      =1  sbit  RS0          = PSW^3;
 136      =1  sbit  OV           = PSW^2;
 137      =1  sbit  F1           = PSW^1;
 138      =1  sbit  P            = PSW^0;
 139      =1  
 140      =1  /*  TCON  */
 141      =1  sbit  TF1          = TCON^7;
 142      =1  sbit  TR1          = TCON^6;
 143      =1  sbit  TF0          = TCON^5;
 144      =1  sbit  TR0          = TCON^4;
 145      =1  sbit  IE1          = TCON^3;
 146      =1  sbit  IT1          = TCON^2;
 147      =1  sbit  IE0          = TCON^1;
 148      =1  sbit  IT0          = TCON^0;
 149      =1  
 150      =1  /*  S0CON  */
 151      =1  sbit  SM0          = S0CON^7;
 152      =1  sbit  SM1          = S0CON^6;
 153      =1  sbit  SM20         = S0CON^5;
 154      =1  sbit  REN0         = S0CON^4;
 155      =1  sbit  TB80         = S0CON^3;
 156      =1  sbit  RB80         = S0CON^2;
 157      =1  sbit  TI0          = S0CON^1;
 158      =1  sbit  RI0          = S0CON^0;
 159      =1  
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 4   

 160      =1  /*  T2CON  */
 161      =1  sbit  T2PS         = T2CON^7;
 162      =1  sbit  I3FR         = T2CON^6;
 163      =1  sbit  I2FR         = T2CON^5;
 164      =1  sbit  T2R1         = T2CON^4;
 165      =1  sbit  T2R0         = T2CON^3;
 166      =1  sbit  T2CM         = T2CON^2;
 167      =1  sbit  T2I1         = T2CON^1;
 168      =1  sbit  T2I0         = T2CON^0;
 169      =1  
 170      =1  /*  IEN0  */
 171      =1  sbit  EA           = IEN0^7;
 172      =1  
 173      =1  sbit  ET2          = IEN0^5;
 174      =1  sbit  ES0          = IEN0^4;
 175      =1  sbit  ET1          = IEN0^3;
 176      =1  sbit  EX1          = IEN0^2;
 177      =1  sbit  ET0          = IEN0^1;
 178      =1  sbit  EX0          = IEN0^0;
 179      =1  
 180      =1  /* IEN1  */
 181      =1  sbit  EXEN2        = IEN1^7;
 182      =1  
 183      =1  sbit  WUIRQ        = IEN1^5;
 184      =1  sbit  USB          = IEN1^4;
 185      =1  sbit  USBWU        = IEN1^3;
 186      =1  sbit  SPI          = IEN1^2;
 187      =1  sbit  RF           = IEN1^1;
 188      =1  sbit  RFSPI        = IEN1^0;
 189      =1  
 190      =1  /* IRCON */
 191      =1  sbit  EXF2         = IRCON^7;
 192      =1  sbit  TF2          = IRCON^6;
 193      =1  sbit  WUF          = IRCON^5;
 194      =1  sbit  USBF         = IRCON^4;
 195      =1  sbit  USBWUF       = IRCON^3;
 196      =1  sbit  SPIF         = IRCON^2;
 197      =1  sbit  RFF          = IRCON^1;
 198      =1  sbit  RFSPIF       = IRCON^0;
 199      =1  
 200      =1  /* USBCON */
 201      =1  sbit  SWRST        = USBCON^7;
 202      =1  sbit  WU           = USBCON^6;
 203      =1  sbit  SUSPEND      = USBCON^5;
 204      =1  sbit  IV4          = USBCON^4;
 205      =1  sbit  IV3          = USBCON^3;
 206      =1  sbit  IV2          = USBCON^2;
 207      =1  sbit  IV1          = USBCON^1;
 208      =1  sbit  IV0          = USBCON^0;
 209      =1  
 210      =1  /* PORT0 */
 211      =1  sbit  P00          = P0^0;
 212      =1  sbit  P01          = P0^1;
 213      =1  sbit  P02          = P0^2;
 214      =1  sbit  P03          = P0^3;
 215      =1  sbit  MCSN         = P0^3;
 216      =1  sbit  SCSN         = P0^3;
 217      =1  sbit  P04          = P0^4;
 218      =1  sbit  P05          = P0^5;
 219      =1  
 220      =1  /* RFCON */
 221      =1  sbit  RFCE         = RFCON^0;
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 5   

 222      =1  sbit  RFCSN        = RFCON^1;
 223      =1  sbit  RFCKEN       = RFCON^2;
 224      =1  
 225      =1  /* WDCON */
 226      =1  sbit  BD           = WDCON^7;
 227      =1  
 228      =1  /* AESCS */
 229      =1  sbit  GO           = AESCS^0;
 230      =1  sbit  DECR         = AESCS^1;
 231      =1  
 232      =1  /*lint +e18 */  /* Re-enable Lint warning 18 */
 233      =1  
 234      =1  
 235      =1  /* REGX commands */
 236      =1  #define RWD         0x00
 237      =1  #define WWD         0x08
 238      =1  #define RGTIMER     0x01
 239      =1  #define WGTIMER     0x09
 240      =1  #define RRTCLAT     0x02
 241      =1  #define WRTCLAT     0x0A
 242      =1  #define RRTC        0x03
 243      =1  #define WRTCDIS     0x0B
 244      =1  #define RWSTA0      0x04
 245      =1  #define WWCON0      0x0C
 246      =1  #define RWSTA1      0x05
 247      =1  #define WWCON1      0x0D
 248      =1  
 249      =1  //-----------------------------------------------------------------------------
 250      =1  // Interrupt Vector Definitions
 251      =1  //-----------------------------------------------------------------------------
 252      =1  
 253      =1  #define INTERRUPT_EXT_INT0     0   // External Interrupt0 (P0.3)
 254      =1  #define INTERRUPT_T0           1   // Timer0 Overflow
 255      =1  #define INTERRUPT_AES_RDY      2   // AES ready interrupt
 256      =1  #define INTERRUPT_T1           3   // Timer1 Overflow
 257      =1  #define INTERRUPT_UART0        4   // UART0, Receive & Transmitt interrupt
 258      =1  #define INTERRUPT_T2           5   // Timer2 Overflow
 259      =1  #define INTERRUPT_RF_RDY       8   // RF SPI ready interrupt
 260      =1  #define INTERRUPT_RFIRQ        9   // RF interrupt
 261      =1  #define INTERRUPT_SPI          10  // SPI interrupt
 262      =1  #define INTERRUPT_USB_WU       11  // USB wakeup interrupt
 263      =1  #define INTERRUPT_USB_INT      12  // USB interrupt
 264      =1  #define INTERRUPT_WU           13  // Internal wakeup interrupt
 265      =1  
 266      =1  //-----------------------------------------------------------------------------
 267      =1  // Header File Preprocessor Directive
 268      =1  //-----------------------------------------------------------------------------
 269      =1  
 270      =1  #endif
  19          #include "cklf.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 5717 $
  12      =1   */
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 6   

  13      =1  
  14      =1  /** @file
  15      =1   * @brief Interface functions for the low frequency clock module.
  16      =1   * @defgroup hal_nrf24lu1p_cklf Low frequency clock (cklf)
  17      =1   * @{
  18      =1   * @ingroup hal_nrf24lu1p
  19      =1   * in the nRF24LU1
  20      =1   */
  21      =1  #ifndef CKLF_H__
  22      =1  #define CKLF_H__
  23      =1  
  24      =1  #include <stdint.h>
   1      =2  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =2   * Terms and conditions of usage are described in detail in NORDIC
   5      =2   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *
  11      =2   * $LastChangedRevision: 4726 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2   * Type definitions for firmware projects developed at Nordic semiconductor.
  16      =2   *
  17      =2   * Standard storage classes in C, such as @c char, @c int, and @c long, ar not always
  18      =2   * interpreted in the same way by the compiler. The types here are defined by their
  19      =2   * bit length and signed/unsigned property, as their name indicate. The correlation
  20      =2   * between the name and properties of the storage class should be true, regardless of
  21      =2   * the compiler being used.
  22      =2   */
  23      =2  
  24      =2  #ifndef __STDINT_H__
  25      =2  #define __STDINT_H__
  26      =2  
  27      =2  #ifdef __C51__
  28      =2  
  29      =2  typedef unsigned char uint8_t;        ///< 8 bit unsigned int
  30      =2  
  31      =2  typedef signed char int8_t;          ///< 8 bit signed int
  32      =2  
  33      =2  typedef unsigned int uint16_t;        ///< 16 bit unsigned int
  34      =2  
  35      =2  typedef signed int int16_t;          ///< 16 bit signed int
  36      =2  
  37      =2  typedef unsigned long uint32_t;       ///< 32 bit unsigned int
  38      =2  
  39      =2  typedef signed long int32_t;         ///< 32 bit signed int
  40      =2  
  41      =2  #endif // __C51__
  42      =2  
  43      =2  #ifndef NULL
  44      =2  #define NULL (void*)0
  45      =2  #endif
  46      =2  
  47      =2  #endif // __STDINT_H__
  25      =1  
  26      =1  /** Function to write to the low frequency clock interface (CKLF) in nRF24LU1.
  27      =1   * @param addr the address of the register to write
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 7   

  28      =1   * @param val the value to write to the register
  29      =1   */
  30      =1  void cklf_regxc_write(uint8_t addr, uint16_t val);
  31      =1  
  32      =1  /** Function to read the low frequency clock interface (CKLF) in nRF24LU1.
  33      =1   * @param addr the address of the register to read
  34      =1   * @return the value read
  35      =1   */
  36      =1  uint16_t cklf_regxc_read(uint8_t addr);
  37      =1  
  38      =1  /** Function to disable the RTC.
  39      =1   * This function should be called before reading values from the RTC counter.
  40      =1   */
  41      =1  void cklf_rtc_disable(void);
  42      =1  
  43      =1  /** Function to initialize the RTC.
  44      =1   *  @param cnt_h The upper 8 bits of the 24 bit value to load into the RTC latch
  45      =1   *  @param cnt_l The lower 16 bits of the 24 bit value to load into the RTC latch
  46      =1   */
  47      =1  void cklf_rtc_init(uint8_t cnt_h, uint16_t cnt_l);
  48      =1  
  49      =1  /** Function to read the lower 16 bits of the RTC counter.
  50      =1   *  To ensure consistency between the return value of this function and
  51      =1   *  cklf_rtc_read_msb the RTC should be disabled before calling these functions.
  52      =1   *  @return The lower 16 bits of the RTC counter.
  53      =1   */
  54      =1  uint16_t cklf_rtc_read_lsw(void);
  55      =1  
  56      =1  /** Function to read the upper 8 bits of the RTC counter.
  57      =1   *  To ensure consistency between the return value of this function and
  58      =1   *  cklf_rtc_read_lsw the RTC should be disabled before calling these functions.
  59      =1   *  @return The upper 8 bits of the RTC counter.
  60      =1   */
  61      =1  uint8_t cklf_rtc_read_msb(void);
  62      =1  
  63      =1  /** Function to wait for the RTC counter to reach 0.
  64      =1   * This function enters an infinite loop polling the RTC interrupt flag. When
  65      =1   * the flag is set the flag is cleared and the function returns.
  66      =1   *
  67      =1   */
  68      =1  void cklf_rtc_wait(void);
  69      =1  
  70      =1  /** Function to initialize and enable the watch dog.
  71      =1   * @param cnt The value to load into the watch dog counter.
  72      =1   */
  73      =1  void cklf_wdog_init(uint16_t cnt);
  74      =1  
  75      =1  /** Function to reload the watch dog.
  76      =1   * This function reloads the watch dog counter with the parameter given in the
  77      =1   * hal_wdog_init function.
  78      =1   */
  79      =1  void cklf_wdog_feed(void);
  80      =1  
  81      =1  /** Function to program the GPIO wakeup functionality
  82      =1   *  @param wcon0 Value of WCON0 register (P00 - P03) 
  83      =1   *  @param wcon1 Value of WCON1 register (P04 - P07)
  84      =1   */
  85      =1  void cklf_gpio_wakeup(uint16_t wcon1, uint16_t wcon0);
  86      =1  
  87      =1  #endif // CKLF_H__
  88      =1  /** @} */
  20          
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 8   

  21          static uint16_t wd_cnt;
  22          
  23          void cklf_regxc_write(uint8_t addr, uint16_t val)
  24          {
  25   1        REGXH = val >> 8;
  26   1        REGXL = val & 0xff;
  27   1        REGXC = addr;
  28   1      }
  29          
  30          uint16_t cklf_regxc_read(uint8_t addr)
  31          {
  32   1        uint16_t val;
  33   1      
  34   1        REGXC = addr;
  35   1        val = (uint16_t)REGXH;
  36   1        val <<= 8;
  37   1        val |= (uint16_t)REGXL;
  38   1        return val;
  39   1      }
  40          
  41          void cklf_rtc_disable(void)
  42          {
  43   1        cklf_regxc_write(WRTCDIS, 0);
  44   1      }
  45          
  46          void cklf_rtc_init(uint8_t cnt_h, uint16_t cnt_l)
  47          {
  48   1        cklf_regxc_write(WRTCDIS, 0);                // Disable RTC timer before updating latch
  49   1        WUF = 0;                                     // Clear any pending interrupts
  50   1        cklf_regxc_write(WGTIMER, (uint16_t)cnt_h);  // Program MS part first
  51   1        cklf_regxc_write(WRTCLAT, cnt_l);            // Write LS part and enable RTC
  52   1      }
  53          
  54          uint16_t cklf_rtc_read_lsw(void)
  55          {
  56   1        return cklf_regxc_read(RRTC);
  57   1      }
  58          
  59          uint8_t cklf_rtc_read_msb(void)
  60          {
  61   1        return (uint8_t)(cklf_regxc_read(RGTIMER) >> 8);
  62   1      }
  63          
  64          void cklf_rtc_wait(void)
  65          {
  66   1        while(WUF == 0)                         // Wait until IEX6 is set
  67   1          ;
  68   1        WUF = 0;
  69   1      }
  70          
  71          void cklf_wdog_init(uint16_t cnt)
  72          {
  73   1        wd_cnt = cnt;
  74   1        cklf_regxc_write(WWD, wd_cnt);
  75   1      }
  76          
  77          void cklf_wdog_feed(void)
  78          {
  79   1        cklf_regxc_write(WWD, wd_cnt);
  80   1      }
  81          
  82          void cklf_gpio_wakeup(uint16_t wcon1, uint16_t wcon0)
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 9   

  83          {
  84   1        cklf_regxc_write(WWCON1, wcon1);
  85   1        cklf_regxc_write(WWCON0, wcon0);
  86   1      }
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _cklf_regxc_write (BEGIN)
                                           ; SOURCE LINE # 23
;---- Variable 'val' assigned to Register 'R4/R5' ----
;---- Variable 'addr' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
0002 EC                MOV     A,R4
0003 F5AB              MOV     REGXH,A
                                           ; SOURCE LINE # 26
0005 ED                MOV     A,R5
0006 F5AC              MOV     REGXL,A
                                           ; SOURCE LINE # 27
0008 AF03              MOV     R7,AR3
000A 8FAD              MOV     REGXC,R7
                                           ; SOURCE LINE # 28
000C 22                RET     
             ; FUNCTION _cklf_regxc_write (END)

             ; FUNCTION _cklf_regxc_read (BEGIN)
                                           ; SOURCE LINE # 30
;---- Variable 'addr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 34
0000 8FAD              MOV     REGXC,R7
                                           ; SOURCE LINE # 35
0002 AFAB              MOV     R7,REGXH
;---- Variable 'val' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 36
0004 EF                MOV     A,R7
0005 FE                MOV     R6,A
                                           ; SOURCE LINE # 37
0006 ADAC              MOV     R5,REGXL
0008 ED                MOV     A,R5
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
000A         ?C0002:
000A 22                RET     
             ; FUNCTION _cklf_regxc_read (END)

             ; FUNCTION cklf_rtc_disable (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003 7F0B              MOV     R7,#0BH
0005 020000      R     LJMP    _cklf_regxc_write
             ; FUNCTION cklf_rtc_disable (END)

             ; FUNCTION _cklf_rtc_init (BEGIN)
                                           ; SOURCE LINE # 46
;---- Variable 'cnt_h' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
;---- Variable 'cnt_l' assigned to Register 'DPTR' ----
0002 8D82              MOV     DPL,R5
0004 8C83              MOV     DPH,R4
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 11  

                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 FC                MOV     R4,A
0009 7F0B              MOV     R7,#0BH
000B 120000      R     LCALL   _cklf_regxc_write
                                           ; SOURCE LINE # 49
000E C2C5              CLR     WUF
                                           ; SOURCE LINE # 50
0010 EE                MOV     A,R6
0011 FD                MOV     R5,A
0012 7F09              MOV     R7,#09H
0014 120000      R     LCALL   _cklf_regxc_write
                                           ; SOURCE LINE # 51
0017 AE83              MOV     R6,DPH
0019 AF82              MOV     R7,DPL
001B AD07              MOV     R5,AR7
001D AC06              MOV     R4,AR6
001F 7F0A              MOV     R7,#0AH
0021 020000      R     LJMP    _cklf_regxc_write
             ; FUNCTION _cklf_rtc_init (END)

             ; FUNCTION cklf_rtc_read_lsw (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 7F03              MOV     R7,#03H
0002 120000      R     LCALL   _cklf_regxc_read
                                           ; SOURCE LINE # 57
0005         ?C0005:
0005 22                RET     
             ; FUNCTION cklf_rtc_read_lsw (END)

             ; FUNCTION cklf_rtc_read_msb (BEGIN)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _cklf_regxc_read
0005 EE                MOV     A,R6
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 62
0007         ?C0006:
0007 22                RET     
             ; FUNCTION cklf_rtc_read_msb (END)

             ; FUNCTION cklf_rtc_wait (BEGIN)
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0000         ?C0007:
                                           ; SOURCE LINE # 66
0000 30C5FD            JNB     WUF,?C0007
0003         ?C0008:
                                           ; SOURCE LINE # 68
0003 C2C5              CLR     WUF
                                           ; SOURCE LINE # 69
0005 22                RET     
             ; FUNCTION cklf_rtc_wait (END)

             ; FUNCTION _cklf_wdog_init (BEGIN)
                                           ; SOURCE LINE # 71
C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 12  

;---- Variable 'cnt' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0000 900000      R     MOV     DPTR,#wd_cnt
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 FC                MOV     R4,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
0009 FD                MOV     R5,A
                                           ; SOURCE LINE # 74
000A 7F08              MOV     R7,#08H
000C 020000      R     LJMP    _cklf_regxc_write
             ; FUNCTION _cklf_wdog_init (END)

             ; FUNCTION cklf_wdog_feed (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0000 900000      R     MOV     DPTR,#wd_cnt
0003 E0                MOVX    A,@DPTR
0004 FC                MOV     R4,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FD                MOV     R5,A
0008 7F08              MOV     R7,#08H
000A 020000      R     LJMP    _cklf_regxc_write
             ; FUNCTION cklf_wdog_feed (END)

             ; FUNCTION _cklf_gpio_wakeup (BEGIN)
                                           ; SOURCE LINE # 82
;---- Variable 'wcon1' assigned to Register 'R6/R7' ----
;---- Variable 'wcon0' assigned to Register 'DPTR' ----
0000 8D82              MOV     DPL,R5
0002 8C83              MOV     DPH,R4
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0004 AD07              MOV     R5,AR7
0006 AC06              MOV     R4,AR6
0008 7F0D              MOV     R7,#0DH
000A 120000      R     LCALL   _cklf_regxc_write
                                           ; SOURCE LINE # 85
000D AE83              MOV     R6,DPH
000F AF82              MOV     R7,DPL
0011 AD07              MOV     R5,AR7
0013 AC06              MOV     R4,AR6
0015 7F0C              MOV     R7,#0CH
0017 020000      R     LJMP    _cklf_regxc_write
             ; FUNCTION _cklf_gpio_wakeup (END)

C51 COMPILER V9.02   CKLF                                                                  05/15/2011 19:16:12 PAGE 13  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
REGXH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
wd_cnt . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0000H  2
REGXL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
cklf_rtc_read_lsw. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
cklf_rtc_disable . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
_cklf_regxc_read . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_cklf_gpio_wakeup. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wcon1. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  wcon0. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0082H  2
cklf_wdog_feed . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_cklf_regxc_write. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
USBCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
_cklf_wdog_init. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_cklf_rtc_init . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cnt_h. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  cnt_l. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0082H  2
S0CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
cklf_rtc_wait. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
FSR. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
cklf_rtc_read_msb. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AESCS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
WUF. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
RFCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
REGXC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
IRCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
