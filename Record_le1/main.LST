C51 COMPILER V9.02   MAIN                                                                  05/15/2011 19:55:15 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.2.0.270\sour
                    -ce_code\hal;C:\Nordic Semiconductor\nRFgo SDK 2.2.0.270\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo SDK 2.2.0
                    -.270\source_code\hal\nrf24l01p) DEBUG OBJECTEXTEND

line level    source

   1          #include <reg24le1.h>
   2          #include <intrins.h>
   3          #include <stdint.h>
   4          
   5          #include "nordic_common.h"  
   6          
   7          #include "hal_nrf.h"
   8          #include "hal_nrf_hw.h"
   9          #include "hal_spi.h"
  10          
  11          #define MAXLENGTH 32
  12          #define MAXBLOCKS  3
  13          #define CALC_PAYLOAD_PTR(bl) payload+bl*MAXPAYLOAD
  14          
  15          void init_radio();
  16          
  17           sbit P0_0 = P0^0;
  18            sbit P0_4 = P0^4;
  19            sbit P0_5 = P0^5;
  20            sbit P1_6 = P1^6;
  21            sbit P0_7 = P0^7;
  22            sbit P1_4 = P1^4;
  23          
  24          data uint8_t g_Amplitude = 0;
  25          data uint8_t g_acq_block;        // current block thats acquiring data
  26          data uint8_t payload[2][MAXLENGTH];
  27          
  28          data uint8_t *ptr_payload;
  29          data volatile uint8_t g_cnt;
  30          data volatile uint8_t g_dataNeedsTx;
  31          
  32           // Global variables
  33          bool radio_busy;
  34          
  35          //#define DEBUG
  36          //#define FOURPIN
  37          
  38          
  39          #ifdef DEBUG
              
              xdata uint16_t timer_high = 0;
              xdata uint16_t timer_low = 0;
              void progTimer(uint8_t Freq, uint8_t DC);
              
              #endif
  46          void main()
  47          {
  48   1      // 0 = output
  49   1              #ifdef FOURPIN
                      P0DIR &= ~(1<<4);
                      #else
  52   1              P1DIR &= ~( (1<<0) | (1<<4) | (1<<6) );                         // SMISO, LED6
  53   1              #endif
C51 COMPILER V9.02   MAIN                                                                  05/15/2011 19:55:15 PAGE 2   

  54   1      //      P0DIR &= ~( (1<<7) | (1<<5) );          // SMOSI, SSCK
  55   1      
  56   1      //      P1DIR &= ~(1<<6);
  57   1       #ifndef DEBUG
  58   1              hal_spi_slave_preload(0xAA);
  59   1              hal_spi_slave_preload(0xAA);
  60   1              hal_spi_slave_init( HAL_SPI_MODE_0, HAL_SPI_LSB_MSB);
  61   1      
  62   1              SPISCON0 &= ~ (1<<4);   // Enable irqSpiSlaveDone
  63   1      
  64   1      //          P1_6 = 0;
  65   1       #else
              
                      progTimer(240, 50);     
                         CRCL = 0xF0;
                 CRCH = 0xF0;
                         CCEN = 0x02;  // Compare enabled
                    /*T2CON: */
                 T2PS = 1; // CLK/24 , no reload
                 T2R1 = 1;
                // T2CM = 1;  
                 T2I0 = 1; // Turn on timer
                  ET2 = 1; // Enable timer 2 interrupt        
               #endif 
  78   1      
  79   1         g_cnt = 30;  
  80   1              RFCKEN = 1;        // Enable the radio clock
  81   1          
  82   1              init_radio();
  83   1      
  84   1      #ifndef DEBUG
  85   1              SPI = 1;
  86   1      #endif  
  87   1          // Enable global interrupt
  88   1              EA = 1;
  89   1      
  90   1      
  91   1          for(;;)
  92   1          {
  93   2      //      g_dataNeedsTx = 1;
  94   2                      if(1 == g_dataNeedsTx)
  95   2                      {
  96   3      
  97   3      //                      P1_4 = 1;
  98   3                              hal_nrf_write_tx_payload(payload[((g_acq_block^(0x01))&(0x01))],MAXLENGTH);
  99   3      //                      P1_4 = 0;
 100   3              
 101   3                              radio_busy = true;
 102   3              
 103   3                              CE_PULSE();
 104   3              
 105   3                              while(radio_busy);
 106   3              
 107   3                      _nop_();
 108   3              
 109   3                              g_dataNeedsTx = 0;
 110   3                      }
 111   2          }
 112   1      
 113   1      }
 114          
 115          #ifdef DEBUG
C51 COMPILER V9.02   MAIN                                                                  05/15/2011 19:55:15 PAGE 3   

              T2_ISR()
              {
              volatile uint8_t test = 0x55;
              
              //      test = SPISSTAT;
              
              //      test = hal_spi_slave_rw(0xAA);
              
                      *ptr_payload = test;
                      ++ptr_payload;
              
                      g_cnt--;
              
                      if(0 == g_cnt)
                      {
                              g_cnt = 30;
                              g_acq_block &= 1;
                              g_acq_block ^= 1; // toggle current acquisition block
                              ptr_payload = payload[g_acq_block];
                              g_dataNeedsTx = 1;
              //              P1 ^= (1<<4);
                      }
              
              //      P1 ^= (1<<6);
                      _nop_();
              
              
                      
                              CRCL = timer_low&0xFF;
                              CRCH = timer_low>>8;
                
                      
                      TF2 = 0;        
              }
              
              void progTimer(uint8_t Freq, uint8_t DC)
              {
                      data uint32_t period = 0;
                      xdata uint32_t period_us = (uint32_t)1e6/((uint32_t)Freq);
                      period = (uint32_t)period_us*(uint32_t)2/3;
                      timer_high = DC*period/100;
                      timer_low = period - timer_high;
                      timer_high = 2^16-timer_high;   
                      timer_low = 2^16-timer_low;
              }
              
              #endif
 163          
 164          SER_ISR()
 165          {
 166   1              volatile uint8_t test = 0;
 167   1      
 168   1              test = SPISSTAT;
 169   1      
 170   1              test = SPISDAT;// hal_spi_slave_rw(0xAA);
 171   1      
 172   1              *ptr_payload = test;
 173   1              ++ptr_payload;
 174   1      
 175   1              g_cnt--;
 176   1      
 177   1              if(0 == g_cnt)
C51 COMPILER V9.02   MAIN                                                                  05/15/2011 19:55:15 PAGE 4   

 178   1              {
 179   2                      g_cnt = 30;
 180   2                      g_acq_block &= 1;
 181   2                      g_acq_block ^= 1; // toggle current acquisition block
 182   2                      ptr_payload = payload[g_acq_block];
 183   2                      g_dataNeedsTx = 1;
 184   2              }
 185   1      
 186   1      //      P1 ^= (1<<6);
 187   1              _nop_();
 188   1      }
 189          
 190          void init_radio()
 191          {
 192   1        // Enable the radio clock
 193   1        RFCKEN = 1;
 194   1        // Enable RF interrupt
 195   1        RF = 1;
 196   1          // Power up radio
 197   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 198   1      
 199   1              hal_nrf_enable_ack_payload(1);
 200   1              hal_nrf_enable_dynamic_payload(1);
 201   1              hal_nrf_setup_dynamic_payload(1); // Set up PIPE 0 to handle dynamic lengths
 202   1      
 203   1          // Configure radio as primary receiver (PTX) 
 204   1        hal_nrf_set_operation_mode(HAL_NRF_PTX);
 205   1       
 206   1            // Set payload width to 32 bytes
 207   1      //  hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, MAXLENGTH);
 208   1      
 209   1      }
 210          
 211          // Radio interrupt
 212          void rf_irq() interrupt INTERRUPT_RFIRQ
 213          {
 214   1        uint8_t irq_flags;
 215   1      
 216   1        // Read and clear IRQ flags from radio
 217   1        irq_flags = hal_nrf_get_clear_irq_flags(); 
 218   1      
 219   1        switch(irq_flags)
 220   1        {
 221   2          // Transmission success
 222   2          case ( (1 << HAL_NRF_RX_DR) | (1 << HAL_NRF_TX_DS) ):         // We rx payload packet
 223   2      //              procPayload = true;
 224   2                      // Read payload
 225   2                      while(!hal_nrf_rx_fifo_empty())
 226   2                      {
 227   3                  //  hal_nrf_read_rx_payload(progPayload);
 228   3                      }
 229   2                      radio_busy = false;
 230   2                      break;
 231   2              case (1 << HAL_NRF_TX_DS):
 232   2            radio_busy = false;
 233   2            // Data has been sent
 234   2            break;
 235   2          // Transmission failed (maximum re-transmits)
 236   2          case (1 << HAL_NRF_MAX_RT):
 237   2            // When a MAX_RT interrupt occurs the TX payload will not be removed from the TX FIFO. 
 238   2            // If the packet is to be discarded this must be done manually by flushing the TX FIFO.
 239   2            // Alternatively, CE_PULSE() can be called re-starting transmission of the payload.
C51 COMPILER V9.02   MAIN                                                                  05/15/2011 19:55:15 PAGE 5   

 240   2            // (Will only be possible after the radio irq flags are cleared) 
 241   2            hal_nrf_flush_tx();
 242   2            radio_busy = false;
 243   2            break;
 244   2        }
 245   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     71    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
