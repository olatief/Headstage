C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE HAL_NRF
OBJECT MODULE PLACED IN .\hal_nrf.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE C:\Nordic Semiconductor\nRFgo SDK 2.2.0.270\source_code\hal\nrf24l01p\hal_n
                    -rf.c LARGE BROWSE INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.2.0.270\source_code\hal;C:\Nordic Semiconductor\nRFgo SDK 2
                    -.2.0.270\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo SDK 2.2.0.270\source_code\hal\nrf24l01p) DEBUG OBJECTEXT
                    -END PRINT(.\hal_nrf.lst) OBJECT(.\hal_nrf.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 133 $
  12           */
  13          
  14           /** @file
  15            * @brief Implementation of hal_nrf
  16           */
  17          /*lint -t2 */
  18          /*lint -esym( 534, hal_nrf_write_reg ) */
  19          /*lint -esym( 534, hal_nrf_rw ) */
  20          /*lint -e708 */
  21          /*lint -e46 */
  22          
  23          #include <stdint.h>
  24          #include <stdbool.h>
  25          
  26          #include "nordic_common.h"
  27          #include "hal_nrf.h"
  28          
  29          #define SET_BIT(pos) ((uint8_t) (1<<( (uint8_t) (pos) )))
  30          #define UINT8(t) ((uint8_t) (t))
  31          
  32          /** Basis function read_reg.
  33           * Use this function to read the contents
  34           * of one radios register.
  35           *
  36           * @param reg Register to read
  37           * @return Register contents
  38          */
  39          uint8_t hal_nrf_read_reg(uint8_t reg);
  40          
  41          /** Basis function write_reg.
  42           * Use this function to write a new value to
  43           * a radio register.
  44           *
  45           * @param reg Register to write
  46           * @param value New value to write
  47           * @return Status register
  48          */
  49          uint8_t hal_nrf_write_reg(uint8_t data reg, uint8_t data value);
  50          
  51          /** Basis function, read_multibyte register .
  52           * Use this function to read multiple bytes from
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 2   

  53           * a multibyte radio-register
  54           *
  55           * @param reg Multibyte register to read from
  56           * @param *pbuf Pointer to buffer in which to store read bytes to
  57           *
  58           * @return pipe# of received data (MSB), if operation used by a hal_nrf_read_rx_pload
  59           * @return length of read data (LSB), either for hal_nrf_read_rx_pload or
  60           * for hal_nrf_get_address.
  61          */
  62          uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t data *pbuf);
  63          
  64          /** Basis function, write_multibyte register.
  65           * Use this function to write multiple bytes to
  66           * a multiple radio register.
  67           *
  68           * @param reg Register to write
  69           * @param *pbuf pointer to buffer in which data to write is
  70           * @param length \# of bytes to write
  71          */
  72          void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t data *pbuf, uint8_t data length);
  73          
  74          /**
  75           * Typedef for the CONFIG register. Contains all the bitaddressable
  76           * settings in the bits struct and the value sent to the radio in the uint8_t
  77           */
  78          typedef union {
  79            uint8_t value;
  80                  struct {
  81                          uint8_t prim_rx : 1;
  82                          uint8_t pwr_up : 1;
  83                          uint8_t crc0 : 1;
  84                          uint8_t en_crc : 1;
  85                          uint8_t mask_max_rt : 1;
  86                          uint8_t mask_tx_ds : 1;
  87                          uint8_t mask_rx_dr : 1;
  88                          const uint8_t : 1;
  89                  } bits;
  90          } config_t;
  91          
  92          /**
  93           * Typedef for the EN_AA, EN_RXADDR and DYNPD registers. Contains all the
  94           * bitaddressable settings in the bits struct and the value sent to the radio
  95           * in the uint8_t
  96           */
  97          typedef union {
  98            uint8_t value;
  99            struct {
 100              uint8_t pipe_0 : 1;
 101              uint8_t pipe_1 : 1;
 102              uint8_t pipe_2 : 1;
 103              uint8_t pipe_3 : 1;
 104              uint8_t pipe_4 : 1;
 105              uint8_t pipe_5 : 1;
 106              const uint8_t : 2;
 107            } bits;
 108          } en_pipes_t;
 109          
 110          /**
 111           * Typedef for the SETUP_AW register. Contains all the bitaddressable
 112           * settings in the bits struct and the value sent to the radio in the uint8_t
 113           */
 114          typedef union {
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 3   

 115            uint8_t value;
 116                  struct {
 117                          uint8_t aw : 2;
 118                          const uint8_t : 6;
 119                  } bits;
 120          } setup_aw_t;
 121          
 122          /**
 123           * Typedef for the SETUP_RETR register. Contains all the bitaddressable
 124           * settings in the bits struct and the value sent to the radio in the uint8_t
 125           */
 126          typedef union {
 127            uint8_t value;
 128                  struct {
 129                          uint8_t arc : 4;
 130                          uint8_t ard : 4;
 131                  } bits;
 132          } setup_retr_t;
 133          
 134          /**
 135           * Typedef for the RF_CH register. Contains all the bitaddressable
 136           * settings in the bits struct and the value sent to the radio in the uint8_t
 137           */
 138          typedef union {
 139            uint8_t value;
 140                  struct {
 141                          uint8_t rf_ch : 7;
 142                          const uint8_t : 1;
 143                  } bits;
 144          } rf_ch_t;
 145          
 146          /**
 147           * Typedef for the RF_SETUP register. Contains all the bitaddressable
 148           * settings in the bits struct and the value sent to the radio in the uint8_t
 149           */
 150          typedef union {
 151            uint8_t value;
 152                  struct {
 153                          const uint8_t : 1;
 154                          uint8_t rf_pwr : 2;
 155                          uint8_t rf_dr_high : 1;
 156                          uint8_t pll_lock : 1;
 157                          uint8_t rf_dr_low : 1;
 158              const uint8_t : 1;
 159              uint8_t cont_wave : 1;
 160                  } bits;
 161          } rf_setup_t;
 162          
 163          /**
 164           * Typedef for the RX_PW_Px registers. Contains all the bitaddressable
 165           * settings in the bits struct and the value sent to the radio in the uint8_t
 166           */
 167          typedef union {
 168            uint8_t value;
 169                  struct {
 170                          uint8_t rx_pw : 6;
 171                          const uint8_t : 2;
 172                  } bits;
 173          } rx_pw_t;
 174          
 175          /**
 176           * Typedef for the FEATURE register. Contains all the bitaddressable
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 4   

 177           * settings in the bits struct and the value sent to the radio in the uint8_t
 178           */
 179          typedef union {
 180            uint8_t value;
 181                  struct {
 182                          uint8_t en_dyn_ack : 1;
 183                          uint8_t en_ack_pay : 1;
 184                          uint8_t en_dpl : 1;
 185                          const uint8_t : 5;
 186                  } bits;
 187          } feature_t;
 188          
 189          void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
 190          {
 191   1        config_t config;
 192   1        config.value = hal_nrf_read_reg (CONFIG);
 193   1      
 194   1        if(op_mode == HAL_NRF_PRX)
 195   1        {
 196   2          config.bits.prim_rx = 1;
 197   2        }
 198   1        else
 199   1        {
 200   2          config.bits.prim_rx = 0;
 201   2        }
 202   1      
 203   1        hal_nrf_write_reg (CONFIG, config.value);
 204   1      }
 205          
 206          void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
 207          {
 208   1        config_t config;
 209   1        config.value = hal_nrf_read_reg (CONFIG);
 210   1      
 211   1        if(pwr_mode == HAL_NRF_PWR_UP)
 212   1        {
 213   2          config.bits.pwr_up = 1;
 214   2        }
 215   1        else
 216   1        {
 217   2          config.bits.pwr_up = 0;
 218   2        }
 219   1      
 220   1        hal_nrf_write_reg (CONFIG, config.value);
 221   1      }
 222          
 223          void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
 224          {
 225   1        config_t config;
 226   1        config.value = hal_nrf_read_reg (CONFIG);
 227   1      
 228   1              switch (crc_mode)
 229   1              {
 230   2                      case HAL_NRF_CRC_OFF:
 231   2                              config.bits.en_crc = 0;
 232   2                              break;
 233   2                      case HAL_NRF_CRC_8BIT:
 234   2                              config.bits.en_crc = 1;
 235   2                              config.bits.crc0 = 0;
 236   2                              break;
 237   2                      case HAL_NRF_CRC_16BIT:
 238   2                              config.bits.en_crc = 1;
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 5   

 239   2                              config.bits.crc0 = 1;
 240   2                              break;
 241   2                      default:
 242   2                              break;
 243   2              }
 244   1      
 245   1        hal_nrf_write_reg (CONFIG, config.value);
 246   1      }
 247          
 248          void hal_nrf_set_irq_mode(hal_nrf_irq_source_t int_source, bool irq_state)
 249          {
 250   1        config_t config;
 251   1        config.value = hal_nrf_read_reg (CONFIG);
 252   1      
 253   1              switch (int_source)
 254   1              {
 255   2                      case HAL_NRF_MAX_RT:
 256   2                              config.bits.mask_max_rt = irq_state ? 0 : 1;
 257   2            break;
 258   2          case HAL_NRF_TX_DS:
 259   2            config.bits.mask_tx_ds = irq_state ? 0 : 1;
 260   2            break;
 261   2          case HAL_NRF_RX_DR:
 262   2            config.bits.mask_rx_dr = irq_state ? 0 : 1;
 263   2            break;
 264   2        }
 265   1      
 266   1        hal_nrf_write_reg (CONFIG, config.value);
 267   1      }
 268          
 269          uint8_t hal_nrf_get_clear_irq_flags(void)
 270          {
 271   1        uint8_t retval;
 272   1      
 273   1        retval = hal_nrf_write_reg (STATUS, (BIT_6|BIT_5|BIT_4));
 274   1      
 275   1        return (retval & (BIT_6|BIT_5|BIT_4));
 276   1      }
 277          
 278          uint8_t hal_nrf_clear_irq_flags_get_status(void)
 279          {
 280   1        uint8_t retval;
 281   1      
 282   1        // When RFIRQ is cleared (when calling write_reg), pipe information is unreliable (read again with read_
             -reg)
 283   1        retval = hal_nrf_write_reg (STATUS, (BIT_6|BIT_5|BIT_4)) & (BIT_6|BIT_5|BIT_4);
 284   1        retval |= hal_nrf_read_reg (STATUS) & (BIT_3|BIT_2|BIT_1|BIT_0);
 285   1      
 286   1        return (retval);
 287   1      }
 288          
 289          
 290          void hal_nrf_clear_irq_flag(hal_nrf_irq_source_t int_source)
 291          {
 292   1        hal_nrf_write_reg (STATUS, SET_BIT(int_source));
 293   1      }
 294          
 295          uint8_t hal_nrf_get_irq_flags(void)
 296          {
 297   1        return hal_nrf_nop() & (BIT_6|BIT_5|BIT_4);
 298   1      }
 299          
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 6   

 300          void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, bool auto_ack)
 301          {
 302   1        en_pipes_t en_rxaddr;
 303   1        en_pipes_t en_aa;
 304   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 305   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 306   1      
 307   1        switch(pipe_num)
 308   1        {
 309   2          case HAL_NRF_PIPE0:
 310   2          case HAL_NRF_PIPE1:
 311   2          case HAL_NRF_PIPE2:
 312   2          case HAL_NRF_PIPE3:
 313   2          case HAL_NRF_PIPE4:
 314   2          case HAL_NRF_PIPE5:
 315   2            en_rxaddr.value = en_rxaddr.value | SET_BIT(pipe_num);
 316   2      
 317   2            if(auto_ack)
 318   2            {
 319   3              en_aa.value = en_aa.value | SET_BIT(pipe_num);
 320   3            }
 321   2            else
 322   2            {
 323   3              en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
 324   3            }
 325   2            break;
 326   2      
 327   2          case HAL_NRF_ALL:
 328   2            en_rxaddr.value = (uint8_t)(~(BIT_6|BIT_7));
 329   2      
 330   2            if(auto_ack)
 331   2            {
 332   3              en_aa.value = (uint8_t)(~(BIT_6|BIT_7));
 333   3            }
 334   2            else
 335   2            {
 336   3              en_aa.value = 0;
 337   3            }
 338   2            break;
 339   2      
 340   2          case HAL_NRF_TX:
 341   2          default:
 342   2            break;
 343   2        }
 344   1      
 345   1        hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 346   1        hal_nrf_write_reg (EN_AA, en_aa.value);
 347   1      }
 348          
 349          void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
 350          {
 351   1        en_pipes_t en_rxaddr;
 352   1        en_pipes_t en_aa;
 353   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 354   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 355   1      
 356   1        switch(pipe_num)
 357   1        {
 358   2          case HAL_NRF_PIPE0:
 359   2          case HAL_NRF_PIPE1:
 360   2          case HAL_NRF_PIPE2:
 361   2          case HAL_NRF_PIPE3:
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 7   

 362   2          case HAL_NRF_PIPE4:
 363   2          case HAL_NRF_PIPE5:
 364   2            en_rxaddr.value = en_rxaddr.value & ~SET_BIT(pipe_num);
 365   2            en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
 366   2            break;
 367   2      
 368   2          case HAL_NRF_ALL:
 369   2            en_rxaddr.value = 0;
 370   2            en_aa.value = 0;
 371   2            break;
 372   2      
 373   2          case HAL_NRF_TX:
 374   2          default:
 375   2            break;
 376   2        }
 377   1      
 378   1        hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 379   1        hal_nrf_write_reg (EN_AA, en_aa.value);
 380   1      }
 381          
 382          void hal_nrf_set_address(const hal_nrf_address_t address, const uint8_t *addr)
 383          {
 384   1        switch(address)
 385   1        {
 386   2          case HAL_NRF_TX:
 387   2          case HAL_NRF_PIPE0:
 388   2          case HAL_NRF_PIPE1:
 389   2            hal_nrf_write_multibyte_reg(W_REGISTER + RX_ADDR_P0 + (uint8_t) address, addr, hal_nrf_get_address_w
             -idth());
 390   2            break;
 391   2          case HAL_NRF_PIPE2:
 392   2          case HAL_NRF_PIPE3:
 393   2          case HAL_NRF_PIPE4:
 394   2          case HAL_NRF_PIPE5:
 395   2            hal_nrf_write_reg (RX_ADDR_P0 + (uint8_t) address, *addr);
 396   2            break;
 397   2      
 398   2          case HAL_NRF_ALL:
 399   2          default:
 400   2            break;
 401   2        }
 402   1      }
 403          
 404          uint8_t hal_nrf_get_address(uint8_t address, uint8_t *addr)
 405          {
 406   1        switch (address)
 407   1        {
 408   2          case HAL_NRF_PIPE0:
 409   2          case HAL_NRF_PIPE1:
 410   2          case HAL_NRF_TX:
 411   2            return (uint8_t)hal_nrf_read_multibyte_reg (address, addr);
 412   2          default:
 413   2            *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
 414   2            return 1;
 415   2        }
 416   1      }
 417          
 418          void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay)
 419          {
 420   1        setup_retr_t setup_retr;
 421   1        setup_retr.bits.ard = (delay >> 8);
 422   1        setup_retr.bits.arc = retr;
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 8   

 423   1      
 424   1        hal_nrf_write_reg (SETUP_RETR, setup_retr.value);
 425   1      }
 426          
 427          void hal_nrf_set_address_width(hal_nrf_address_width_t aw)
 428          {
 429   1        setup_aw_t setup_aw;
 430   1        setup_aw.bits.aw = (uint8_t)aw - 2;
 431   1      
 432   1        hal_nrf_write_reg (SETUP_AW, setup_aw.value);
 433   1      }
 434          
 435          uint8_t hal_nrf_get_address_width (void)
 436          {
 437   1        return hal_nrf_read_reg (SETUP_AW) + 2;
 438   1      }
 439          
 440          void hal_nrf_set_rx_payload_width(uint8_t pipe_num, uint8_t pload_width)
 441          {
 442   1        hal_nrf_write_reg (RX_PW_P0 + pipe_num, pload_width);
 443   1      }
 444          
 445          uint8_t hal_nrf_get_pipe_status(uint8_t pipe_num)
 446          {
 447   1        en_pipes_t en_rxaddr;
 448   1        en_pipes_t en_aa;
 449   1        uint8_t en_rx_r, en_aa_r;
 450   1      
 451   1        en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 452   1        en_aa.value = hal_nrf_read_reg (EN_AA);
 453   1      
 454   1        switch (pipe_num)
 455   1        {
 456   2          case 0:
 457   2            en_rx_r = en_rxaddr.bits.pipe_0;
 458   2            en_aa_r = en_aa.bits.pipe_0;
 459   2            break;
 460   2          case 1:
 461   2            en_rx_r = en_rxaddr.bits.pipe_1;
 462   2            en_aa_r = en_aa.bits.pipe_1;
 463   2            break;
 464   2          case 2:
 465   2            en_rx_r = en_rxaddr.bits.pipe_2;
 466   2            en_aa_r = en_aa.bits.pipe_2;
 467   2            break;
 468   2          case 3:
 469   2            en_rx_r = en_rxaddr.bits.pipe_3;
 470   2            en_aa_r = en_aa.bits.pipe_3;
 471   2            break;
 472   2          case 4:
 473   2            en_rx_r = en_rxaddr.bits.pipe_4;
 474   2            en_aa_r = en_aa.bits.pipe_4;
 475   2            break;
 476   2          case 5:
 477   2            en_rx_r = en_rxaddr.bits.pipe_5;
 478   2            en_aa_r = en_aa.bits.pipe_5;
 479   2            break;
 480   2          default:
 481   2            en_rx_r = 0;
 482   2            en_aa_r = 0;
 483   2            break;
 484   2        }
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 9   

 485   1      
 486   1        return (uint8_t)(en_aa_r << 1) + en_rx_r;
 487   1      }
 488          
 489          uint8_t hal_nrf_get_auto_retr_status(void)
 490          {
 491   1        return hal_nrf_read_reg(OBSERVE_TX);
 492   1      }
 493          
 494          uint8_t hal_nrf_get_packet_lost_ctr(void)
 495          {
 496   1        return ((hal_nrf_read_reg(OBSERVE_TX) & (BIT_7|BIT_6|BIT_5|BIT_4)) >> 4);
 497   1      }
 498          
 499          uint8_t hal_nrf_get_rx_payload_width(uint8_t pipe_num)
 500          {
 501   1        uint8_t pw;
 502   1      
 503   1        switch (pipe_num)
 504   1        {
 505   2          case 0:
 506   2            pw = hal_nrf_read_reg (RX_PW_P0);
 507   2            break;
 508   2          case 1:
 509   2            pw = hal_nrf_read_reg (RX_PW_P1);
 510   2            break;
 511   2          case 2:
 512   2            pw = hal_nrf_read_reg (RX_PW_P2);
 513   2            break;
 514   2          case 3:
 515   2            pw = hal_nrf_read_reg (RX_PW_P3);
 516   2            break;
 517   2          case 4:
 518   2            pw = hal_nrf_read_reg (RX_PW_P4);
 519   2            break;
 520   2          case 5:
 521   2            pw = hal_nrf_read_reg (RX_PW_P5);
 522   2            break;
 523   2          default:
 524   2            pw = 0;
 525   2            break;
 526   2        }
 527   1      
 528   1        return pw;
 529   1      }
 530          
 531          void hal_nrf_set_rf_channel(uint8_t channel)
 532          {
 533   1        rf_ch_t rf_ch;
 534   1        rf_ch.bits.rf_ch = channel;
 535   1        hal_nrf_write_reg (RF_CH, rf_ch.value);
 536   1      }
 537          
 538          void hal_nrf_set_output_power(hal_nrf_output_power_t power)
 539          {
 540   1        rf_setup_t rf_setup;
 541   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 542   1      
 543   1        rf_setup.bits.rf_pwr = (uint8_t)power;
 544   1      
 545   1        hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 546   1      }
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 10  

 547          
 548          void hal_nrf_set_datarate(hal_nrf_datarate_t datarate)
 549          {
 550   1        rf_setup_t rf_setup;
 551   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 552   1      
 553   1        switch (datarate)
 554   1        {
 555   2          case HAL_NRF_250KBPS:
 556   2            rf_setup.bits.rf_dr_low = 1;
 557   2            rf_setup.bits.rf_dr_high = 0;
 558   2            break;
 559   2          case HAL_NRF_1MBPS:
 560   2            rf_setup.bits.rf_dr_low = 0;
 561   2            rf_setup.bits.rf_dr_high = 0;
 562   2            break;
 563   2          case HAL_NRF_2MBPS:
 564   2          default:
 565   2            rf_setup.bits.rf_dr_low = 0;
 566   2            rf_setup.bits.rf_dr_high = 1;
 567   2            break;
 568   2        }
 569   1      
 570   1        hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 571   1      }
 572          
 573          bool hal_nrf_rx_fifo_empty(void)
 574          {
 575   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> RX_EMPTY) & 1);
 576   1      }
 577          
 578          bool hal_nrf_rx_fifo_full(void)
 579          {
 580   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS)>> RX_FULL) & 1);
 581   1      }
 582          
 583          bool hal_nrf_tx_fifo_empty(void)
 584          {
 585   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_EMPTY) & 1);
 586   1      }
 587          
 588          bool hal_nrf_tx_fifo_full(void)
 589          {
 590   1        return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_FIFO_FULL) & 1);
 591   1      }
 592          
 593          uint8_t hal_nrf_get_tx_fifo_status(void)
 594          {
 595   1        return ((hal_nrf_read_reg(FIFO_STATUS) & ((1<<TX_FIFO_FULL)|(1<<TX_EMPTY))) >> 4);
 596   1      }
 597          
 598          uint8_t hal_nrf_get_rx_fifo_status(void)
 599          {
 600   1        return (hal_nrf_read_reg(FIFO_STATUS) & ((1<<RX_FULL)|(1<<RX_EMPTY)));
 601   1      }
 602          
 603          uint8_t hal_nrf_get_fifo_status(void)
 604          {
 605   1        return hal_nrf_read_reg(FIFO_STATUS);
 606   1      }
 607          
 608          uint8_t hal_nrf_get_transmit_attempts(void)
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 11  

 609          {
 610   1        return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_3|BIT_2|BIT_1|BIT_0));
 611   1      }
 612          
 613          bool hal_nrf_get_carrier_detect(void)
 614          {
 615   1        return hal_nrf_read_reg(CD) & 1;
 616   1      }
 617          
 618          void hal_nrf_activate_features(void)
 619          {return;}
 620          
 621          void hal_nrf_setup_dynamic_payload (uint8_t setup)
 622          {
 623   1        en_pipes_t dynpd;
 624   1        dynpd.value = setup & ~0xC0;
 625   1      
 626   1        hal_nrf_write_reg (DYNPD, dynpd.value);
 627   1      }
 628          
 629          void hal_nrf_enable_dynamic_payload(bool enable)
 630          {
 631   1        feature_t feature;
 632   1        feature.value = hal_nrf_read_reg (FEATURE);
 633   1        feature.bits.en_dpl = (enable) ? 1 : 0;
 634   1      
 635   1        hal_nrf_write_reg (FEATURE, feature.value);
 636   1      }
 637          
 638          void hal_nrf_enable_ack_payload(bool enable)
 639          {
 640   1        feature_t feature;
 641   1        feature.value = hal_nrf_read_reg (FEATURE);
 642   1        feature.bits.en_ack_pay = (enable) ? 1 : 0;
 643   1      
 644   1        hal_nrf_write_reg (FEATURE, feature.value);
 645   1      }
 646          
 647          void hal_nrf_enable_dynamic_ack(bool enable)
 648          {
 649   1        feature_t feature;
 650   1        feature.value = hal_nrf_read_reg (FEATURE);
 651   1        feature.bits.en_dyn_ack = (enable) ? 1 : 0;
 652   1      
 653   1        hal_nrf_write_reg (FEATURE, feature.value);
 654   1      }
 655          
 656          void hal_nrf_write_tx_payload(const uint8_t data *tx_pload, uint8_t data length)
 657          {
 658   1        hal_nrf_write_multibyte_reg(W_TX_PAYLOAD, tx_pload, length);
 659   1      }
 660          
 661          void hal_nrf_write_tx_payload_noack(const uint8_t data *tx_pload, uint8_t data length)
 662          {
 663   1        hal_nrf_write_multibyte_reg(W_TX_PAYLOAD_NOACK, tx_pload, length);
 664   1      }
 665          
 666          void hal_nrf_write_ack_payload(uint8_t pipe, const uint8_t data *tx_pload, uint8_t data length)
 667          {
 668   1        hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
 669   1      }
 670          
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 12  

 671          uint8_t hal_nrf_read_rx_payload_width()
 672          {
 673   1        return hal_nrf_read_reg(R_RX_PL_WID);
 674   1      }
 675          
 676          uint16_t hal_nrf_read_rx_payload(uint8_t data *rx_pload)
 677          {
 678   1        return hal_nrf_read_multibyte_reg(UINT8(HAL_NRF_RX_PLOAD), rx_pload);
 679   1      }
 680          
 681          uint8_t hal_nrf_get_rx_data_source(void)
 682          {
 683   1        return ((hal_nrf_nop() & (BIT_3|BIT_2|BIT_1)) >> 1);
 684   1      }
 685          
 686          void hal_nrf_reuse_tx(void)
 687          {
 688   1        CSN_LOW();
 689   1        hal_nrf_rw(REUSE_TX_PL);
 690   1        CSN_HIGH();
 691   1      }
 692          
 693          bool hal_nrf_get_reuse_tx_status(void)
 694          {
 695   1        return (bool)((hal_nrf_get_fifo_status() & (1<<TX_REUSE)) >> TX_REUSE);
 696   1      }
 697          
 698          void hal_nrf_flush_rx(void)
 699          {
 700   1        CSN_LOW();
 701   1        hal_nrf_rw(FLUSH_RX);
 702   1        CSN_HIGH();
 703   1      }
 704          
 705          void hal_nrf_flush_tx(void)
 706          {
 707   1        CSN_LOW();
 708   1        hal_nrf_rw(FLUSH_TX);
 709   1        CSN_HIGH();
 710   1      }
 711          
 712          uint8_t hal_nrf_nop(void)
 713          {
 714   1        uint8_t retval;
 715   1      
 716   1        CSN_LOW();
 717   1        retval = hal_nrf_rw(NOP);
 718   1        CSN_HIGH();
 719   1      
 720   1        return retval;
 721   1      }
 722          
 723          void hal_nrf_set_pll_mode(bool pll_lock)
 724          {
 725   1        rf_setup_t rf_setup;
 726   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 727   1        rf_setup.bits.pll_lock = (pll_lock) ? 1 : 0;
 728   1      
 729   1        hal_nrf_write_reg(RF_SETUP, rf_setup.value);
 730   1      }
 731          
 732          void hal_nrf_enable_continious_wave (bool enable)
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 13  

 733          {
 734   1        rf_setup_t rf_setup;
 735   1        rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 736   1        rf_setup.bits.cont_wave = (enable ? 1 : 0);
 737   1      
 738   1        hal_nrf_write_reg(RF_SETUP, rf_setup.value);
 739   1      }
 740          
 741          uint8_t hal_nrf_read_reg(uint8_t reg)
 742          {
 743   1        uint8_t temp;
 744   1      
 745   1        CSN_LOW();
 746   1      
 747   1        HAL_NRF_HW_SPI_WRITE(reg);
 748   1        while(HAL_NRF_HW_SPI_BUSY) {}
 749   1        temp = HAL_NRF_HW_SPI_READ();
 750   1      
 751   1        HAL_NRF_HW_SPI_WRITE(0);
 752   1        while(HAL_NRF_HW_SPI_BUSY) {}
 753   1        temp = HAL_NRF_HW_SPI_READ();
 754   1      
 755   1        CSN_HIGH();
 756   1      
 757   1        return temp;
 758   1      }
 759          
 760          uint8_t hal_nrf_write_reg(uint8_t data reg, uint8_t data value)
 761          {
 762   1        uint8_t retval;
 763   1      /*lint -esym(550,dummy) symbol not accessed*/
 764   1      /*lint -esym(438,dummy) last assigned value not used*/
 765   1      /*lint -esym(838,dummy) previously assigned value not used*/
 766   1        uint8_t volatile dummy;
 767   1      
 768   1        CSN_LOW();
 769   1      
 770   1        HAL_NRF_HW_SPI_WRITE((W_REGISTER + reg));
 771   1        while(HAL_NRF_HW_SPI_BUSY) {}
 772   1        retval = HAL_NRF_HW_SPI_READ();
 773   1      
 774   1        HAL_NRF_HW_SPI_WRITE(value);
 775   1        while(HAL_NRF_HW_SPI_BUSY) {}
 776   1        dummy = HAL_NRF_HW_SPI_READ();
 777   1      
 778   1        CSN_HIGH();
 779   1      
 780   1        return retval;
 781   1      }
 782          
 783          #define NRF_READ_MULTIBYTE_REG_COMMON_BODY \
 784              do \
 785              { \
 786                HAL_NRF_HW_SPI_WRITE(0); \
 787                if (first_round == false) \
 788                { \
 789                  *buf = read_byte; \
 790                  buf++; \
 791                } \
 792                else \
 793                { \
 794                  first_round = false; \
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 14  

 795                } \
 796                /* wait for byte transfer finished */ \
 797                while(HAL_NRF_HW_SPI_BUSY){} \
 798                read_byte = HAL_NRF_HW_SPI_READ(); \
 799              } while (--ctr); \
 800              *buf = read_byte;
 801          
 802          uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t data *pbuf)
 803          {
 804   1        uint8_t ctr, length;
 805   1        uint8_t memtype;
 806   1        uint8_t read_byte; /*lint -esym(530,read_byte) symbol not initialized*/
 807   1        bool first_round;
 808   1        first_round = true;
 809   1      
 810   1        memtype = *(uint8_t*)(&pbuf);
 811   1      
 812   1        switch(reg)
 813   1        {
 814   2          case HAL_NRF_PIPE0:
 815   2          case HAL_NRF_PIPE1:
 816   2          case HAL_NRF_TX:
 817   2            length = ctr = hal_nrf_get_address_width();
 818   2            CSN_LOW();
 819   2            hal_nrf_rw(RX_ADDR_P0 + reg);
 820   2            break;
 821   2      
 822   2          case HAL_NRF_RX_PLOAD:
 823   2            if( (reg = hal_nrf_get_rx_data_source()) < 7)
 824   2            {
 825   3              length = ctr = hal_nrf_read_rx_payload_width();
 826   3              CSN_LOW();
 827   3              hal_nrf_rw(R_RX_PAYLOAD);
 828   3            }
 829   2            else
 830   2            {
 831   3              ctr = length = 0;
 832   3            }
 833   2            break;
 834   2      
 835   2          default:
 836   2            ctr = length = 0;
 837   2            break;
 838   2        }
 839   1      
 840   1        if (memtype == 0x00)
 841   1        {
 842   2          uint8_t data *buf = (uint8_t data *)pbuf;
 843   2          NRF_READ_MULTIBYTE_REG_COMMON_BODY
 844   2        }
 845   1        else if (memtype == 0x01)
 846   1        {
 847   2          uint8_t xdata *buf = (uint8_t xdata *)pbuf;
 848   2          NRF_READ_MULTIBYTE_REG_COMMON_BODY
 849   2        }
 850   1        else if (memtype == 0xFE)
 851   1        {
 852   2          uint8_t pdata *buf = (uint8_t pdata *)pbuf;
 853   2          NRF_READ_MULTIBYTE_REG_COMMON_BODY
 854   2        }
 855   1        else
 856   1        {
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 15  

 857   2          uint8_t *buf = (uint8_t *)pbuf;
 858   2          NRF_READ_MULTIBYTE_REG_COMMON_BODY
 859   2        }
 860   1      
 861   1        CSN_HIGH();
 862   1      
 863   1        return (((uint16_t) reg << 8) | length);
 864   1      }
 865          
 866          #define NRF_WRITE_MULTIBYTE_REG_COMMON_BODY \
 867            do \
 868            { \
 869              next = *buf; \
 870              buf++; \
 871              while(HAL_NRF_HW_SPI_BUSY) {}  /* wait for byte transfer finished */ \
 872              dummy = HAL_NRF_HW_SPI_READ(); \
 873              HAL_NRF_HW_SPI_WRITE(next); \
 874            } while (--length);
 875          /*lint -esym(550,dummy) symbol not accessed*/ \
 876          /*lint -esym(438,dummy) last assigned value not used*/ \
 877          /*lint -esym(838,dummy) previously assigned value not used*/ \
 878          void hal_nrf_write_multibyte_reg(uint8_t cmd, const uint8_t data *pbuf, uint8_t data length)
 879          {
 880   1        uint8_t memtype;
 881   1        uint8_t next;
 882   1        uint8_t volatile dummy;
 883   1      
 884   1        memtype = *(uint8_t*)(&pbuf);
 885   1      
 886   1        CSN_LOW();
 887   1        HAL_NRF_HW_SPI_WRITE(cmd);
 888   1      
 889   1        if (memtype == 0x00)
 890   1        {
 891   2          const uint8_t data *buf = (const uint8_t data *)pbuf;
 892   2          NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 893   2        }
 894   1        else if (memtype == 0x01)
 895   1        {
 896   2          const uint8_t xdata *buf = (const uint8_t xdata *)pbuf;
 897   2          NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 898   2        }
 899   1        else if (memtype == 0xFE)
 900   1        {
 901   2          const uint8_t pdata *buf = (const uint8_t pdata *)pbuf;
 902   2          NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 903   2        }
 904   1        else
 905   1        {
 906   2          const uint8_t *buf = (const uint8_t *)pbuf;
 907   2          NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 908   2        }
 909   1      
 910   1        while(HAL_NRF_HW_SPI_BUSY) {} /* wait for byte transfer finished */
 911   1        dummy = HAL_NRF_HW_SPI_READ();
 912   1        CSN_HIGH();
 913   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2426    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.02   HAL_NRF                                                               05/15/2011 19:55:15 PAGE 16  

   XDATA SIZE       =   ----      65
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
